<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020浙江取证比武解题记录</title>
      <link href="/posts/2c157dc1/"/>
      <url>/posts/2c157dc1/</url>
      
        <content type="html"><![CDATA[<div class="note flat"><p><strong>阶段一<br>1.计算受害者电脑磁盘的SHA256校验码<br>2.系统中首次成功连接Wi-Fi网络的时间<br>3.浏览器中保存的表单信息的内容<br>4.受害者电脑中,勒索病毒程序的文件名及MD5值<br>5.勒索病毒开始运行的时间<br>6.勒索病毒程序修改文件的方式<br>7.勒索病毒留下的勒素信息中gmail邮箱的密码<br>8.植入病毒的嫌疑人在作案过程中使用的电脑的IP地址</strong></p></div><h1 id="计算受害者电脑磁盘的SHA256校验码"><a href="#计算受害者电脑磁盘的SHA256校验码" class="headerlink" title="计算受害者电脑磁盘的SHA256校验码"></a>计算受害者电脑磁盘的SHA256校验码</h1><p>取证大师计算镜像哈希：<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/1.png" alt=""><br>SHA256值：<code>D4A3F6C32B51660E8810803D0BF74103582AE949EDD6453B73291FF45B326D18</code></p><h1 id="系统中首次成功连接Wi-Fi网络的时间"><a href="#系统中首次成功连接Wi-Fi网络的时间" class="headerlink" title="系统中首次成功连接Wi-Fi网络的时间"></a>系统中首次成功连接Wi-Fi网络的时间</h1><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>取证大师：<code>取证结果→系统痕迹→无线上网</code>，看到首次连接时间：<code>2020-8-20 12:03:19</code>。<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/2-1.png" alt=""></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>被害人计算机→Win+R→<code>eventvwr</code>打开事件查看器，然后找<br>应用程序和服务日志→Microsoft→Windows→WLAN-AutoConfig→Operational<br>寻找第一个8001的时间（8000是开始连接，8001是成功，8002是失败，8003是断开连接）。<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/2-2.png" alt=""></p><h1 id="浏览器中保存的表单信息的内容"><a href="#浏览器中保存的表单信息的内容" class="headerlink" title="浏览器中保存的表单信息的内容"></a>浏览器中保存的表单信息的内容</h1><p>取证大师：<code>取证结果→上网记录→Google Chrome→表单信息</code>，右侧可以查看字段名称、字段值等信息。<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/3.png" alt=""><br>图中显示<code>字段名称：pwd，字段值：93og</code>。</p><h1 id="受害者电脑中-勒索病毒程序的文件名及MD5值"><a href="#受害者电脑中-勒索病毒程序的文件名及MD5值" class="headerlink" title="受害者电脑中,勒索病毒程序的文件名及MD5值"></a>受害者电脑中,勒索病毒程序的文件名及MD5值</h1><p>（做这道题的时候经历了两落两起的过程）</p><ul><li>一落：在取证大师的取证结果一栏里面大致看了一下，没有关于勒索病毒的明确的分析结果，那么接下来就应该猜测被害人是从什么途径感染病毒的，所以就应该着重从他的上网记录、远程桌面连接情况、QQ聊天记录等方面分析，如果还分析不出来，就要去看看系统日志了。</li><li>一起：分析到Google Chrome浏览器的下载记录之后，发现下载了一个<code>WannaCry.exe</code>，结合下载时间<code>2020.9.5</code>，再联想到之前曾出现过<strong>WannaRen勒索病毒</strong>，还持续了挺长一段时间，这俩的名字长的挺像，可以作为进一步分析的方向。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/4-1.png" alt=""></p><ul><li>二落：此文件下载的网站是<code>baidupan.com</code>，通过访问网站、查询ICP备案信息发现此网站就是由蓝奏云官方运营的，所以此文件是不是个病毒文件又成了个疑问。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/4-2.png" alt=""><br>备注：上图所述查询结果来自于：<a href="http://icp.chinaz.com/baidupan.com">http://icp.chinaz.com/baidupan.com</a></p><ul><li>二起：之前下载过很多蓝奏云的资源，此文件是通过二级、三级域名下载的，那么就说明这个文件是由某人上传到蓝奏云，然后由被害人下载到计算机中的。</li></ul><p>最后百度搜索了WannaCry，百度百科给的解释是：</p><blockquote><p>WannaCry（又叫Wanna Decryptor），一种“蠕虫式”的勒索病毒软件，大小3.3MB，由不法分子利用NSA（National Security Agency，美国国家安全局）泄露的危险漏洞“EternalBlue”（永恒之蓝）进行传播。</p></blockquote><p>所以可以确定<code>WannaCry.exe</code>就是本题中的勒索病毒程序。<br>最后通过检索文件名，找到此文件，计算出MD5等值。<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/4-3.png" alt=""><br>MD5值：<code>B78730D768231EADCDA4880CEE260ED1</code></p><h1 id="勒索病毒开始运行的时间"><a href="#勒索病毒开始运行的时间" class="headerlink" title="勒索病毒开始运行的时间"></a>勒索病毒开始运行的时间</h1><p>从证据文件栏中搜索wannacry，按照修改时间排序，第一个就是<code>2020-09-05 18:19:54</code>，然后顺着时间往下看，到<code>18:20:23</code>开始，每一秒内都有大量的文件被修改：<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/5-1.png" alt=""><br>结合这些文件之前的访问时间和创建时间来看，这些被修改的行为都是加上了<code>WannaCry</code>的后缀，也就是说勒索病毒从此刻开始运行了。<br>在<code>用户痕迹→应用程序访问记录</code>中查找wannacry，显示最后运行时间是<code>2020 18:20:22</code>。<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/5-3.png" alt=""></p><div class="hide-toggle" style="border: 1px solid grey"><div class="hide-button toggle-title" style="background-color: grey;color: white"><i class="fas fa-caret-right fa-fw"></i><span>想说一点题外话</span></div>    <div class="hide-content"><p><strong>做取证题的更多的意义是为了将来的工作，所以不能单纯为了做题而做题，应该想着通过分析镜像文件，能否由此推断出被害人或者嫌疑人的活动轨迹和活动心理，对于以后分析会更有帮助。</strong><br>为什么想起来说这些呢？<br>最开始是在<code>取证结果</code>栏里面搜索的wannacry，发现了一系列上网记录：<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/5-2.png" alt=""></p><p>从<code>18:19</code>下载了勒索病毒，后来到<code>18:33</code>搜索与wannacry有关的关键词。中间经过了十多分钟，此时不难推测wannacry病毒已经基本完成攻击活动。被害人发现自己的计算机感染了勒索病毒，于是上网搜索破解病毒的方法，这是分析一些简单的行为轨迹。<br>从打开网页的时间来看，被害人在这些网页的停留时间都很短，先后打开两个网页的时间间隔也只有短短十几秒左右，不难知道被害人此时内心极度慌张，浏览网页也静不下心来。（心理轨迹）<br>分析这些虽说很简单（难度甚至比CTF的签到题还简单），但是以后慢慢经历，见的多了，以后就知道怎么可以更轻松的去取证了。</p></div></div><h1 id="勒索病毒程序修改文件的方式"><a href="#勒索病毒程序修改文件的方式" class="headerlink" title="勒索病毒程序修改文件的方式"></a>勒索病毒程序修改文件的方式</h1><p>从前面分析出病毒运行是给文件<code>添加wannacry后缀</code>，如果仅仅是添加后缀，就把后缀删掉就行了。<br><strong>火眼仿真+VMware</strong>打开被害人计算机镜像（win7系统）（记得提前给镜像断网）：<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/6-1.png" alt=""><br>桌面图标<code>第一行第四列</code>的位置就是WannaCry，打开看一下：<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/6-2.png" alt=""><br>标题栏发现似乎有关联文件<strong>@please_Read_Me@</strong>，随后在桌面<code>第二行第三列</code>发现这个txt文件，文件里面的内容就是上图内容。<br>删除过一堆文件的wannacry后缀，然后打开，都可以正常访问，所以它只是给文件加了wannacry的后缀而已，这个从第五题的文件创建和访问时间也可以看出来。</p><div class="note danger flat"><p><strong>如果是这样的话，那么wannacry就不算是勒索病毒，只加个后缀文件，很简单就能给改回来，那么这个wannacry是不是嫌疑人使用的障眼法，真正的勒索病毒不是wannacry？</strong></p></div><p>回过头来一想，这个镜像只是一个比赛的镜像，并不是真实案件的镜像，所以wannacry应该就是第四题中所说的勒索病毒。</p><h1 id="勒索病毒留下的勒素信息中gmail邮箱的密码"><a href="#勒索病毒留下的勒素信息中gmail邮箱的密码" class="headerlink" title="勒索病毒留下的勒素信息中gmail邮箱的密码"></a>勒索病毒留下的勒素信息中gmail邮箱的密码</h1><h1 id="植入病毒的嫌疑人在作案过程中使用的电脑的IP地址"><a href="#植入病毒的嫌疑人在作案过程中使用的电脑的IP地址" class="headerlink" title="植入病毒的嫌疑人在作案过程中使用的电脑的IP地址"></a>植入病毒的嫌疑人在作案过程中使用的电脑的IP地址</h1><div class="note flat"><p><strong>阶段二<br>9.作案电脑中安装的操作系统名称和版本<br>10.作案电脑系统中安装的容器引肇名称<br>11.容器引擎所使用的加速器地址<br>12.作案电脑中保存的案件相关的勒索病毒文件路径及文件名<br>13.作案电脑中SQL Server数据库的密码<br>14.SQL Server数据库中的已知肉机所扫描到的所有IP地址(包括所有下级分支)的个数<br>15.SQL Server数据库中的已知肉机所扫描到的所有IP地址中爆破成功的拥有root 账号密码的 IP 数<br>16.作案聊天工具软件中配置代理服务器IP及端口<br>17.嫌疑人购买该勒索病毒的暗网论坛地址的访问密码<br>18.嫌疑人支付勒素病毒款项时,卖方的虚拟钱包地址<br>19.勒索病毒卖家的姓名、个人网站地址</strong></p></div><h1 id="作案电脑中安装的操作系统名称和版本"><a href="#作案电脑中安装的操作系统名称和版本" class="headerlink" title="作案电脑中安装的操作系统名称和版本"></a>作案电脑中安装的操作系统名称和版本</h1><p>火眼仿真一下，系统自动监测出操作系统和版本。<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/9-1.png" alt=""><br>或者进入镜像计算机<code>lsb_release -a</code>查看：<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/9-2.png" alt=""><br>所以操作系统和版本是：<code>Deepin 20 Bate</code>。</p><h1 id="作案电脑系统中安装的容器引擎名称"><a href="#作案电脑系统中安装的容器引擎名称" class="headerlink" title="作案电脑系统中安装的容器引擎名称"></a>作案电脑系统中安装的容器引擎名称</h1><h1 id="容器引擎所使用的加速器地址"><a href="#容器引擎所使用的加速器地址" class="headerlink" title="容器引擎所使用的加速器地址"></a>容器引擎所使用的加速器地址</h1><p>在嫌疑人的计算机镜像终端输入<code>cat /etc/docker/daemon.json</code>：<br><img src= "/img/loading.gif" data-lazy-src="http://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/2020zhejiang/11.png" alt=""><br><code>https://096wnkcj.mirror.aliyuncs.com</code>。</p><h1 id="作案电脑中保存的案件相关的勒索病毒文件路径及文件名"><a href="#作案电脑中保存的案件相关的勒索病毒文件路径及文件名" class="headerlink" title="作案电脑中保存的案件相关的勒索病毒文件路径及文件名"></a>作案电脑中保存的案件相关的勒索病毒文件路径及文件名</h1><h1 id="作案电脑中SQL-Server数据库的密码"><a href="#作案电脑中SQL-Server数据库的密码" class="headerlink" title="作案电脑中SQL Server数据库的密码"></a>作案电脑中SQL Server数据库的密码</h1><h1 id="SQL-Server数据库中的已知肉机所扫描到的所有IP地址-包括所有下级分支-的个数"><a href="#SQL-Server数据库中的已知肉机所扫描到的所有IP地址-包括所有下级分支-的个数" class="headerlink" title="SQL Server数据库中的已知肉机所扫描到的所有IP地址(包括所有下级分支)的个数"></a>SQL Server数据库中的已知肉机所扫描到的所有IP地址(包括所有下级分支)的个数</h1><h1 id="SQL-Server数据库中的已知肉机所扫描到的所有IP地址中爆破成功的拥有root-账号密码的-IP-数"><a href="#SQL-Server数据库中的已知肉机所扫描到的所有IP地址中爆破成功的拥有root-账号密码的-IP-数" class="headerlink" title="SQL Server数据库中的已知肉机所扫描到的所有IP地址中爆破成功的拥有root 账号密码的 IP 数"></a>SQL Server数据库中的已知肉机所扫描到的所有IP地址中爆破成功的拥有root 账号密码的 IP 数</h1><h1 id="作案聊天工具软件中配置代理服务器IP及端口"><a href="#作案聊天工具软件中配置代理服务器IP及端口" class="headerlink" title="作案聊天工具软件中配置代理服务器IP及端口"></a>作案聊天工具软件中配置代理服务器IP及端口</h1><h1 id="嫌疑人购买该勒索病毒的暗网论坛地址的访问密码"><a href="#嫌疑人购买该勒索病毒的暗网论坛地址的访问密码" class="headerlink" title="嫌疑人购买该勒索病毒的暗网论坛地址的访问密码"></a>嫌疑人购买该勒索病毒的暗网论坛地址的访问密码</h1><h1 id="嫌疑人支付勒素病毒款项时-卖方的虚拟钱包地址"><a href="#嫌疑人支付勒素病毒款项时-卖方的虚拟钱包地址" class="headerlink" title="嫌疑人支付勒素病毒款项时,卖方的虚拟钱包地址"></a>嫌疑人支付勒素病毒款项时,卖方的虚拟钱包地址</h1><h1 id="勒索病毒卖家的姓名、个人网站地址"><a href="#勒索病毒卖家的姓名、个人网站地址" class="headerlink" title="勒索病毒卖家的姓名、个人网站地址"></a>勒索病毒卖家的姓名、个人网站地址</h1><div class="note flat"><p><strong>阶段三<br>20.勒索病毒卖家的微信呢称和微信ID<br>21.勒索病毒卖家的记事本APP的启动密码<br>22.勒索病毒卖家的记事本APP的数据库密码<br>23.犯罪主谋远程连接软件显示的本机识别是多少<br>24.犯罪主谋收款的银行卡卡号<br>25.勒索病毒买家(嫌疑人)的姓名、邮箱地址</strong></p></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF_Re_部分Writeup</title>
      <link href="/posts/aa6da281/"/>
      <url>/posts/aa6da281/</url>
      
        <content type="html"><![CDATA[<h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><h2 id="分析文件"><a href="#分析文件" class="headerlink" title="分析文件"></a>分析文件</h2><p>ida64打开文件，shift+F12查看字符串窗口，发现<strong>Input your flag、success、failed</strong>关键信息。查看相关部分伪代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  v3 = (<span class="keyword">char</span> *)<span class="number">256</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Input your flag:\n"</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_line(v6, <span class="number">256L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v6) != <span class="number">33</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">33</span>; ++i )</span><br><span class="line">    v6[i] ^= v6[i - <span class="number">1</span>];</span><br><span class="line">  v3 = global;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(v6, global, <span class="number">0x21</span>uLL) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Success"</span>, v3);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_12:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Failed"</span>, v3);</span><br><span class="line">  result = __stack_chk_guard;</span><br><span class="line">  <span class="keyword">if</span> ( __stack_chk_guard == v7 )</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></tbody></table></figure><h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><p>输入<code>v6</code>，如果字符串长度≠33，输出failed；如果=33，那么<code>v6</code>从第二位起，每一位都与前一位异或，异或的结果与global的值相等，输出success。<br>跟进global的值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__cstring:0000000100000F6E aFKWOXZUPFVMDGH db 'f',0Ah              ; DATA XREF: __data:_global↓o</span><br><span class="line">__cstring:0000000100000F6E                 db 'k',0Ch,'w&amp;O.@',11h,'x',0Dh,'Z;U',11h,'p',19h,'F',1Fh,'v"M#D',0Eh,'g'</span><br><span class="line">__cstring:0000000100000F6E                 db 6,'h',0Fh,'G2O',0</span><br></pre></td></tr></tbody></table></figure><h2 id="写脚本"><a href="#写脚本" class="headerlink" title="写脚本"></a>写脚本</h2><p>伪代码的意思就是：flag的长度是33位，每一位与前一位异或出的结果值是global。写脚本就是把这个过程逆过来。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">str1 = [<span class="string">'f'</span>,<span class="number">0x0a</span>,<span class="string">'k'</span>,<span class="number">0x0c</span>,<span class="string">'w'</span>,<span class="string">'&amp;'</span>,<span class="string">'O'</span>,<span class="string">'.'</span>,<span class="string">'@'</span>,<span class="number">0x11</span>,<span class="string">'x'</span>,<span class="number">0x0d</span>,<span class="string">'Z'</span>,<span class="string">';'</span>,<span class="string">'U'</span>,<span class="number">0x11</span>,<span class="string">'p'</span>,<span class="number">0x19</span>,<span class="string">'F'</span>,<span class="number">0x1f</span>,<span class="string">'v'</span>,<span class="string">'"'</span>,<span class="string">'M'</span>,<span class="string">'#'</span>,<span class="string">'D'</span>,<span class="number">0x0e</span>,<span class="string">'g'</span>,<span class="number">0x06</span>,<span class="string">'h'</span>,<span class="number">0x0f</span>,<span class="string">'G'</span>,<span class="string">'2'</span>,<span class="string">'O'</span>,<span class="number">0x00</span>]</span><br><span class="line">str2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line"><span class="keyword">if</span> (isinstance(i,str)):</span><br><span class="line">str2.append(ord(i))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">str2.append(int(i))</span><br><span class="line">print(str2)</span><br><span class="line">flag = <span class="string">'f'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(str2)):</span><br><span class="line">flag = flag+chr(str2[i]^str2[i<span class="number">-1</span>])</span><br><span class="line">print(flag)</span><br></pre></td></tr></tbody></table></figure><p>最后获取到flag：<code>flag{QianQiuWanDai_YiTongJiangHu}</code></p><h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h1><h2 id="分析文件-1"><a href="#分析文件-1" class="headerlink" title="分析文件"></a>分析文件</h2><p>ida32打开文件，查看字符串窗口，发现<code>wrong flag!</code>、<code>right flag!</code>，点进去查看伪代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i &gt;= <span class="number">0x64</span> )</span><br><span class="line">      j____report_rangecheckfailure();</span><br><span class="line">    Dest[i] = <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">  sub_41132F(<span class="string">"please enter the flag:"</span>);</span><br><span class="line">  sub_411375(<span class="string">"%20s"</span>, &amp;Str);</span><br><span class="line">  v0 = j_strlen(&amp;Str);</span><br><span class="line">  v1 = (<span class="keyword">const</span> <span class="keyword">char</span> *)sub_4110BE(&amp;Str, v0, &amp;v11);</span><br><span class="line">  <span class="built_in">strncpy</span>(Dest, v1, <span class="number">0x28</span>u);</span><br><span class="line">  v8 = j_strlen(Dest);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v8; ++j )</span><br><span class="line">    Dest[j] += j;</span><br><span class="line">  v2 = j_strlen(Dest);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Dest, Str2, v2) )</span><br><span class="line">    sub_41132F(<span class="string">"rigth flag!\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_41132F(<span class="string">"wrong flag!\n"</span>);</span><br><span class="line">  HIDWORD(v4) = v3;</span><br><span class="line">  LODWORD(v4) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分析代码-1"><a href="#分析代码-1" class="headerlink" title="分析代码"></a>分析代码</h2><p>第八行输入flag，并在第十行<code>sub_4110BE</code>函数对输入的flag进行处理。<br>点进去查看<code>sub_4110BE</code>函数：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// STE0_4</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// STE0_4</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// STE0_4</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E0h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v11; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">void</span> *Dst; <span class="comment">// [esp+F8h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> *v13; <span class="comment">// [esp+104h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !_4 || !_8 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v9 = _8 / <span class="number">3u</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)(_8 / <span class="number">3u</span>) % <span class="number">3</span> )</span><br><span class="line">    ++v9;</span><br><span class="line">  v10 = <span class="number">4</span> * v9;</span><br><span class="line">  *(_DWORD *)_C = v10;</span><br><span class="line">  Dst = <span class="built_in">malloc</span>(v10 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !Dst )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  j_memset(Dst, <span class="number">0</span>, v10 + <span class="number">1</span>);</span><br><span class="line">  v13 = (<span class="keyword">char</span> *)_4;</span><br><span class="line">  v11 = _8;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v11 &gt; <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    byte_41A144[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; v11 &gt;= <span class="number">1</span>; ++i )</span><br><span class="line">    {</span><br><span class="line">      byte_41A144[i] = *v13;</span><br><span class="line">      --v11;</span><br><span class="line">      ++v13;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( !i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( i )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        *((_BYTE *)Dst + v7) = aAbcdefghijklmn[(<span class="keyword">signed</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v4 = v7 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)Dst + v4++) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | <span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v4++) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        *((_BYTE *)Dst + v4) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v7 = v4 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        *((_BYTE *)Dst + v7) = aAbcdefghijklmn[(<span class="keyword">signed</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v5 = v7 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)Dst + v5++) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | <span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v5++) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | <span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v7 = v5 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        *((_BYTE *)Dst + v7) = aAbcdefghijklmn[(<span class="keyword">signed</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v6 = v7 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)Dst + v6++) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | <span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v6++) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | <span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v6) = aAbcdefghijklmn[byte_41A144[<span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">        v7 = v6 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  *((_BYTE *)Dst + v7) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> Dst;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>又复杂又头疼还完全看不懂的加密······不过反复出现的<code>aAbcdefghijklmn</code>有必要去看一下，发现是<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</code>。<br>那这就好说了，这基本就是Base64加密跑不了了。<br>看完<code>sub_4110BE</code>函数，返回伪代码继续往下看（此时v1=base64加密后的flag），第十一行的<code>strncpy</code>函数，把v1的值赋给Dest，后面的<code>0x28u</code>的意思是把v1字符串的前<code>0x28</code>位无符号数(16进制)赋给Dest。<br>第十三、十四行的for循环，就是把Dest的每一位加上其对应的数字，然后与str2比较，相等就是right flag。</p><h2 id="写脚本-1"><a href="#写脚本-1" class="headerlink" title="写脚本"></a>写脚本</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">str2 = <span class="string">'e3nifIH9b_C@n@dH'</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">    x = chr(ord(str2[i]) - i)</span><br><span class="line">    flag = flag + x</span><br><span class="line">print(flag)</span><br><span class="line">flag = base64.b64decode(flag)</span><br><span class="line">print(flag)</span><br></pre></td></tr></tbody></table></figure><h2 id="脚本解析"><a href="#脚本解析" class="headerlink" title="脚本解析"></a>脚本解析</h2><p><code>len(str2)</code>是获取str2字符串的长度，如果不想写这么麻烦，自己又可以查准的话，直接写16也没问题。<br><code>chr(ord(str2[i]) - i)</code>是先把str2的每一位转化成ASCII码对应的数字，然后减去相应位数的数字，再转成字符。下一行就是把这些字符拼接成字符串。<br>第一次<code>print(flag)</code>是看看最初拼接成的字符串是啥样的，然后后边再base64解密。第八、九行的作用就相当于找个base64解密的网站解密一下（真正打比赛的时候不让连外网，所以有必要知道怎么用脚本解密）。<br>最后跑出结果：<code>{i_l0ve_you}</code></p><h1 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h1><p>打开exe，是一个需要输入1234进行上下左右操作的小东西。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/posts/buure/3.png" alt="不一样的flag"></p><h2 id="分析文件-2"><a href="#分析文件-2" class="headerlink" title="分析文件"></a>分析文件</h2><p>ida32打开文件，查看main函数伪代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+17h] [ebp-35h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+30h] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+34h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+38h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+3Ch] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+40h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  qmemcpy(&amp;v3, _data_start__, <span class="number">0x19</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you can choose one action to execute"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1 up"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"2 down"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"3 left"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"4 right\n:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v6);</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">2</span> )</span><br><span class="line">    {</span><br><span class="line">      ++v4;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v6 &gt; <span class="number">2</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v6 == <span class="number">3</span> )</span><br><span class="line">      {</span><br><span class="line">        --v5;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( v6 != <span class="number">4</span> )</span><br><span class="line">LABEL_13:</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        ++v5;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      --v4;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;v4 + i) &lt; <span class="number">0</span> || *(&amp;v4 + i) &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)&amp;v8 + <span class="number">5</span> * v4 + v5 - <span class="number">41</span>) == `<span class="number">1</span>` )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)&amp;v8 + <span class="number">5</span> * v4 + v5 - <span class="number">41</span>) == `#` )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"\nok, the order you enter is the flag!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分析代码-2"><a href="#分析代码-2" class="headerlink" title="分析代码"></a>分析代码</h2><p>第12行的qmemcpy实则是memcpy()函数，其作用是内存拷贝，后面是把<code>_data_start__</code>的数据赋给v3，进行程序的初始化。查看<code>_data_start__</code>的值：<code>.data:00402000 __data_start__  db '*11110100001010000101111#',0</code><br>15-20行就是程序的操作界面，输入v6的值开始跑程序。<br>从47行开始的一个循环和两个条件语句来看，这题基本是一个迷宫题，结合<code>_data_start__</code>的值，要从*跑到#，并且中途不能碰到1。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>结合<code>_data_start__</code>的值，可以形成一个5×5的迷宫：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*1111</span><br><span class="line">01000</span><br><span class="line">01010</span><br><span class="line">00010</span><br><span class="line">1111#</span><br></pre></td></tr></tbody></table></figure><p>按照1234上下左右的步骤，最后得出<code>flag{222441144222}</code></p><h1 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h1><h2 id="分析文件-3"><a href="#分析文件-3" class="headerlink" title="分析文件"></a>分析文件</h2><p>ida64打开，查看字符串窗口，发现：<code>Please input your flag</code>、<code>Congratulation</code>，查看相关部分伪代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">Decry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+Fh] [rbp-51h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_QWORD *)src = 'SLCDN';</span><br><span class="line">  v7 = <span class="number">0L</span>L;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = 'wodah';</span><br><span class="line">  v10 = <span class="number">0L</span>L;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  text = join(key3, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v9);</span><br><span class="line">  <span class="built_in">strcpy</span>(key, key1);</span><br><span class="line">  <span class="built_in">strcat</span>(key, src);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  getchar();</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(key);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( key[v3 % v5] &gt; <span class="number">64</span> &amp;&amp; key[v3 % v5] &lt;= <span class="number">90</span> )</span><br><span class="line">      key[i] = key[v3 % v5] + <span class="number">32</span>;</span><br><span class="line">    ++v3;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please input your flag:"</span>, src);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    v1 = getchar();</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">32</span> )</span><br><span class="line">    {</span><br><span class="line">      ++v2;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v1 &lt;= <span class="number">96</span> || v1 &gt; <span class="number">122</span> )</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( v1 &gt; <span class="number">64</span> &amp;&amp; v1 &lt;= <span class="number">90</span> )</span><br><span class="line">          str2[v2] = (v1 - <span class="number">39</span> - key[v3++ % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        str2[v2] = (v1 - <span class="number">39</span> - key[v3++ % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( !(v3 % v5) )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">      ++v2;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(text, str2) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Congratulation!\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try again!\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v12;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分析代码-3"><a href="#分析代码-3" class="headerlink" title="分析代码"></a>分析代码</h2><p>第23行引入一个自定义的join函数，点进去查看一下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">join</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, <span class="keyword">const</span> <span class="keyword">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(a2);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(v2 + v3 + <span class="number">1</span>);     <span class="comment">//给dest分配一个存储空间</span></span><br><span class="line">  <span class="keyword">if</span> ( !dest )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, a1);     <span class="comment">//把a1的值赋给dest</span></span><br><span class="line">  <span class="built_in">strcat</span>(dest, a2);     <span class="comment">//把a2拼接到a1后面</span></span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过strcpy、strcat函数，可以知道join函数的功能就是拼接字符串。<br>回到最初的伪代码段：<br>此时第23行的text=killshadow(v9处为小端序存储，从右向左看。)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNAS SF0029 电子数据提取与分析能力验证</title>
      <link href="/posts/5b760b72/"/>
      <url>/posts/5b760b72/</url>
      
        <content type="html"><![CDATA[<blockquote><ol><li>加载服务器磁盘，计算磁盘源盘的SHA256哈希值。</li><li>提取“password.txt”文件，并计算文件的SHA256哈希值。</li><li>服务器的操作系统版本，网站数据所在分区的文件系统类型。</li><li>服务器的“root”用户在终端中最后输入运行的命令（除关机命令外）。</li><li>“药品直销网”网站域名。</li><li>网站数据库的类型和版本号。</li><li>固定网站“通知”页面内容。</li><li>网站管理员admin的登录口令。</li><li>网站管理员admin最后登录的IP地址。</li><li>网站中“坐标江西”主帖的点击次数。</li><li>网站中类型为“普通用户”的会员数量、投资总积分、投资总金额。</li><li>将网站的全部会员（含管理员）的会员ID、用户名、推荐人用户名、姓名、手机号、证件号、会员类型、注册时间、投资金额列表导出至Excel表格中。</li><li>使用同一证件号注册会员账号数量最多的会员姓名，以及该会员的全部账号的投资总金额。</li><li>按照推荐人关系，以会员admin为第1层计，会员lkj8在网站会员层级中位于第几层，其上级会员和下级会员各占据了多少层；以图形或其它直观的形式展示该会员的上下级组织层级结构。</li><li>统计网站中下级会员账号数量大于30个且下级会员账号多于3层的会员账号数量，统计上述会员账号按照证件号去重后的数量。</li></ol></blockquote><br><h2 id="加载服务器磁盘，计算磁盘源盘的SHA256哈希值。"><a href="#加载服务器磁盘，计算磁盘源盘的SHA256哈希值。" class="headerlink" title="加载服务器磁盘，计算磁盘源盘的SHA256哈希值。"></a>加载服务器磁盘，计算磁盘源盘的SHA256哈希值。</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>Windows下打开powershell或cmd，输入<code>certutil -hashfile xxx\AFSPT.vmdk SHA256</code>(xxx为文件的路径)，等待计算完成即可。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/1.png" alt=""></p><h3 id="方法二（已安装7Z）"><a href="#方法二（已安装7Z）" class="headerlink" title="方法二（已安装7Z）"></a>方法二（已安装7Z）</h3><p>直接右键文件→CRC SHA→SHA256，等待计算完成即可。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/2.png" alt=""></p><h2 id="提取“password-txt”文件，并计算文件的SHA256哈希值。"><a href="#提取“password-txt”文件，并计算文件的SHA256哈希值。" class="headerlink" title="提取“password.txt”文件，并计算文件的SHA256哈希值。"></a>提取“password.txt”文件，并计算文件的SHA256哈希值。</h2><p>使用取证大师挂载vmdk镜像磁盘，搜索password.txt，点击跳转到源文件后，右键导出此文件。计算SHA256值同第一题。</p><h2 id="服务器的操作系统版本，网站数据所在分区的文件系统类型。"><a href="#服务器的操作系统版本，网站数据所在分区的文件系统类型。" class="headerlink" title="服务器的操作系统版本，网站数据所在分区的文件系统类型。"></a>服务器的操作系统版本，网站数据所在分区的文件系统类型。</h2><p><code>uname -a</code>查看系统版本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux localhost.localdomain 3.10.0-693.el7.x86_64 <span class="comment">#1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></tbody></table></figure><p>网站使用宝塔系统，数据保存在www/wwwroot目录下。www目录属于<strong>分区1[C]</strong>，从取证大师看是XFS系统。</p><h2 id="服务器的“root”用户在终端中最后输入运行的命令（除关机命令外）。"><a href="#服务器的“root”用户在终端中最后输入运行的命令（除关机命令外）。" class="headerlink" title="服务器的“root”用户在终端中最后输入运行的命令（除关机命令外）。"></a>服务器的“root”用户在终端中最后输入运行的命令（除关机命令外）。</h2><p>SSH连接vmdk后，输入<code>cat /root/ .bash_history</code>，查询bash的历史命令。<br>除去最后一个shutdown外，倒数第二个命令就是答案：<code>systemctl list-units --type=service &gt; services.log</code>。</p><h2 id="“药品直销网”网站域名。"><a href="#“药品直销网”网站域名。" class="headerlink" title="“药品直销网”网站域名。"></a>“药品直销网”网站域名。</h2><p>输入<code>netstat -antp</code>，查看端口状态。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/5-1.png" alt=""><br>根据80、888、3306端口，初步判断是Nginx+MySQL组建的网站。<br>接下来查看<code>nginx.conf（Nginx服务器配置文件）</code>。可以在取证软件里面看，也可以导出用自己舒服的软件看（Sublime真香）。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/5-2.png" alt=""><br>此服务端口是888，挂载的宝塔系统，不是传销网站。<br>通过<code>include /www/server/panel/vhost/nginx/*.conf</code>，查看所引用的其他文件conf，最终在<code>ypzxw.local.conf</code>文件中发现域名：<code>ypzxw.local</code>。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/5-3.png" alt=""></p><h2 id="网站数据库的类型和版本号。"><a href="#网站数据库的类型和版本号。" class="headerlink" title="网站数据库的类型和版本号。"></a>网站数据库的类型和版本号。</h2><p>通过8888端口登陆宝塔系统（提前用宝塔命令修改密码），查看到数据库用户名<code>ypzxw</code>和密码<code>mK4JUOaycb9tF7nI</code>，回到控制台输入<code>mysql -uypzxw -pmK4JUOaycb9tF7nI</code>回车，显示连接成功。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/6.png" alt=""></p><div class="note info flat"><p>另一种方法是找到数据库对应的设置文件<code>db_settings.php</code>，查找<strong>user</strong>、<strong>password</strong>等关键信息。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">db_settings.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$db_settings[<span class="string">'host'</span>] = <span class="string">'localhost'</span>;</span><br><span class="line">$db_settings[<span class="string">'user'</span>] = <span class="string">'ypzxw'</span>;</span><br><span class="line">$db_settings[<span class="string">'password'</span>] = <span class="string">'mK4JUOaycb9tF7nI'</span>;</span><br><span class="line">$db_settings[<span class="string">'database'</span>] = <span class="string">'ypzxw'</span>;</span><br><span class="line">$db_settings[<span class="string">'settings_table'</span>] = <span class="string">'m_settings'</span>;</span><br><span class="line">$db_settings[<span class="string">'forum_table'</span>] = <span class="string">'m_entries'</span>;</span><br><span class="line">$db_settings[<span class="string">'category_table'</span>] = <span class="string">'m_categories'</span>;</span><br><span class="line">$db_settings[<span class="string">'userdata_table'</span>] = <span class="string">'m_userdata'</span>;</span><br><span class="line">$db_settings[<span class="string">'userinfo_table'</span>] = <span class="string">'m_userinfo'</span>;</span><br><span class="line">$db_settings[<span class="string">'smilies_table'</span>] = <span class="string">'m_smilies'</span>;</span><br><span class="line">$db_settings[<span class="string">'pages_table'</span>] = <span class="string">'m_pages'</span>;</span><br><span class="line">$db_settings[<span class="string">'banlists_table'</span>] = <span class="string">'m_banlists'</span>;</span><br><span class="line">$db_settings[<span class="string">'useronline_table'</span>] = <span class="string">'m_useronline'</span>;</span><br><span class="line">$db_settings[<span class="string">'login_control_table'</span>] = <span class="string">'m_logincontrol'</span>;</span><br><span class="line">$db_settings[<span class="string">'entry_cache_table'</span>] = <span class="string">'m_entries_cache'</span>;</span><br><span class="line">$db_settings[<span class="string">'userdata_cache_table'</span>] = <span class="string">'m_userdata_cache'</span>;</span><br><span class="line">$db_settings[<span class="string">'bookmark_table'</span>] = <span class="string">'m_bookmarks'</span>;</span><br><span class="line">$db_settings[<span class="string">'read_status_table'</span>] = <span class="string">'m_read_entries'</span>;</span><br><span class="line">$db_settings[<span class="string">'temp_infos_table'</span>] = <span class="string">'m_temp_infos'</span>;</span><br><span class="line">$db_settings[<span class="string">'tags_table'</span>] = <span class="string">'m_tags'</span>;</span><br><span class="line">$db_settings[<span class="string">'bookmark_tags_table'</span>] = <span class="string">'m_bookmark_tags'</span>;</span><br><span class="line">$db_settings[<span class="string">'entry_tags_table'</span>] = <span class="string">'m_entry_tags'</span>;</span><br><span class="line">$db_settings[<span class="string">'subscriptions_table'</span>] = <span class="string">'m_subscriptions'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure></div><p>成功连接数据库之后，输入<code>select version();</code>获取版本信息：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| version()  |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| 5.6.37-log |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure><h2 id="固定网站“通知”页面内容。"><a href="#固定网站“通知”页面内容。" class="headerlink" title="固定网站“通知”页面内容。"></a>固定网站“通知”页面内容。</h2><p>改本地的host文件：<code>192.168.65.130 ypzxw.loacl</code>访问网站（第一次进会卡十秒左右）。打开网站，右上角通知页面点进去，保存HTML。</p><h2 id="网站管理员admin的登录口令。"><a href="#网站管理员admin的登录口令。" class="headerlink" title="网站管理员admin的登录口令。"></a>网站管理员admin的登录口令。</h2><blockquote><p><strong>这道题有不明白的地方，讲解视频在1:37:39开始讲<code>index.inc.php</code>。</strong></p></blockquote><div class="note warning flat"><p>注意在做第八题之前先做第九题，避免admin最后登录的IP被覆盖（当然，知道了密码也可以不登录，不过最好还是验证一下以免出错）。</p></div><p>通过查看网站根目录，默认文档是index.php，获取登录口令，就寻找与登录相关的代码段。<br>寻找与<strong>login</strong>相关的代码段：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($settings[<span class="string">'access_for_users_only'</span>] == <span class="number">1</span> &amp;&amp; <span class="keyword">empty</span>($_SESSION[$settings[<span class="string">'session_prefix'</span>] . <span class="string">'user_id'</span>])) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($mode) || $mode != <span class="string">'account_locked'</span> &amp;&amp; $mode != <span class="string">'register'</span> &amp;&amp; $mode != <span class="string">'page'</span> &amp;&amp; $mode != <span class="string">'js_defaults'</span>)</span><br><span class="line">        $mode = <span class="string">'login'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> ($settings[<span class="string">'forum_enabled'</span>] != <span class="number">1</span> &amp;&amp; (<span class="keyword">empty</span>($_SESSION[$settings[<span class="string">'session_prefix'</span>] . <span class="string">'user_type'</span>]) || $_SESSION[$settings[<span class="string">'session_prefix'</span>] . <span class="string">'user_type'</span>] &lt; <span class="number">2</span>)) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($mode) || $mode != <span class="string">'disabled'</span> &amp;&amp; $mode != <span class="string">'rss'</span> &amp;&amp; $mode != <span class="string">'login'</span> &amp;&amp; $mode != <span class="string">'js_defaults'</span>)</span><br><span class="line">        $mode = <span class="string">'disabled'</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'login'</span>:</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">'includes/login.inc.php'</span>);</span><br><span class="line">    <span class="keyword">if</span> ($mode != <span class="string">'login'</span> &amp;&amp; (!<span class="keyword">isset</span>($_SESSION[$settings[<span class="string">'session_prefix'</span>] . <span class="string">'last_visited_uri'</span>]) || $_SESSION[$settings[<span class="string">'session_prefix'</span>] . <span class="string">'last_visited_uri'</span>] != $currentURI))</span><br></pre></td></tr></tbody></table></figure><p>单纯看index.php看不出太多有价值的东西，此时注意到<code>includes/login.inc.php</code>，那就去看看文件里面的东西。<br>重点在<code>do_login</code>这一部分：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mysqli_num_rows($result) == <span class="number">1</span>) {</span><br><span class="line">$feld = mysqli_fetch_array($result);</span><br><span class="line"><span class="keyword">if</span> (is_pw_correct($request_userpw, $feld[<span class="string">'user_pw'</span>])) {</span><br><span class="line"><span class="keyword">if</span> (trim($feld[<span class="string">"activate_code"</span>]) != <span class="string">''</span>) {</span><br><span class="line">header(<span class="string">"location: index.php?mode=login&amp;login_message=account_not_activated"</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中，<code>is_pw_correct</code>函数是新定义的，定义的位置在<code>functions.inc.php</code>中：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_pw_correct</span>(<span class="params">$pw,$hash</span>)</span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line">  <span class="keyword">if</span>(strlen($hash)==<span class="number">50</span>) <span class="comment">// salted sha1 hash with salt</span></span><br><span class="line">   {</span><br><span class="line">    $salted_hash = substr($hash,<span class="number">0</span>,<span class="number">40</span>);</span><br><span class="line">    $salt = substr($hash,<span class="number">40</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(sha1($pw.$salt)==$salted_hash) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   }</span><br><span class="line">  <span class="keyword">elseif</span>(strlen($hash)==<span class="number">32</span>) <span class="comment">// md5 hash generated in an older version</span></span><br><span class="line">   {</span><br><span class="line">    <span class="keyword">if</span>($hash == md5($pw)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>接下来分析这段代码：<br>前半段：1<del>40位哈希数赋值给salted_hash，41</del>50位赋值给salt，如果<code>明文密码.salted_hash</code>经过哈希加密后的值=salt，验证通过。<br>后半段：如果哈希密码长度是32位，那么直接计算明文密码的MD5值与密文匹配，符合则通过。任何字符串的MD5值必定是32位，所以这里是有留了一个后门，进入后台数据库把原密码成某明文密码的MD5值，然后前台输入明文密码，登陆成功。</p><p>取证题不是CTF，不是说登录进去就行，而是必须要获取到admin管理员的密码。<br>回想第二题的<code>password.txt</code>，与其盲目爆破，不如利用这个当做字典进行爆破。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">with</span> open(`password.txt`, `r`) <span class="keyword">as</span> f:</span><br><span class="line">pw list = [line.rstrip(`\n`) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line"><span class="keyword">for</span> pw <span class="keyword">in</span> pw list:</span><br><span class="line">str = pw + `a9a8e7bc78`</span><br><span class="line">dk = hashlib.sha1(str.encode(`utf<span class="number">-8</span>`))</span><br><span class="line"><span class="keyword">if</span> dk.hexdigest() == `ea536bb7d8e51acc92f280fdea7798f21819dd13a9a8e7bc78`</span><br></pre></td></tr></tbody></table></figure><p>最后爆破出来密码是：kkl4Ib</p><h2 id="网站管理员admin最后登录的IP地址。"><a href="#网站管理员admin最后登录的IP地址。" class="headerlink" title="网站管理员admin最后登录的IP地址。"></a>网站管理员admin最后登录的IP地址。</h2><p>在网探中连接数据库，打开<code>m_userdata</code>表中的数据，第一行可以看到admin用户最后一次登陆的IP是192.168.112.242。或者进入宝塔系统的控制面板查看（前提需要更改宝塔密码）。</p><div class="note info flat"><p>讲解视频中关于宝塔系统用户密码的知识点讲错了(1:59:37)，<code>bt default</code>命令是获取宝塔系统初始默认用户名和密码的指令，后续即使更改了密码也不会改变指令输出内容。</p></div><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/9.png" alt=""></p><h2 id="网站中“坐标江西”主帖的点击次数。"><a href="#网站中“坐标江西”主帖的点击次数。" class="headerlink" title="网站中“坐标江西”主帖的点击次数。"></a>网站中“坐标江西”主帖的点击次数。</h2><p>使用admin账户登陆网站，出现所有帖子的内容，往下翻找到题目为<strong>坐标江西</strong>的帖子，点进去查看右边的阅读次数：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/10.png" alt=""><br>可以看到右边的阅读次数是21次，除去自己点进去的那一次，其原来的点击次数是20次。</p><h2 id="网站中类型为“普通用户”的会员数量、投资总积分、投资总金额。"><a href="#网站中类型为“普通用户”的会员数量、投资总积分、投资总金额。" class="headerlink" title="网站中类型为“普通用户”的会员数量、投资总积分、投资总金额。"></a>网站中类型为“普通用户”的会员数量、投资总积分、投资总金额。</h2><div class="note info flat"><p>先看第十二题，因为第十二题是第十一题的基础工作。</p></div><p>接着第十二题，拿到Excel表格之后，筛选<code>普通用户</code>的个数，表格下边会有一行显示：在3656条记录中找到3378个。所以说<code>普通用户的会员数量</code>是3378。<br>对投资金额一栏求和，得到<code>投资总金额</code>：17140000。<br>对于投资总积分这一项，表中没有这类数据。回到网站数据库中寻找<code>m_userinfo</code>这个表，选择CSV for MS Excel将表中数据导出，用十二题相同方法处理CSV文件。之后筛选出普通用户，计算投资积分栏的和，就是<code>投资总积分</code>：137120000。</p><h2 id="将网站的全部会员（含管理员）的会员ID、用户名、推荐人用户名、姓名、手机号、证件号、会员类型、注册时间、投资金额列表导出至Excel表格中。"><a href="#将网站的全部会员（含管理员）的会员ID、用户名、推荐人用户名、姓名、手机号、证件号、会员类型、注册时间、投资金额列表导出至Excel表格中。" class="headerlink" title="将网站的全部会员（含管理员）的会员ID、用户名、推荐人用户名、姓名、手机号、证件号、会员类型、注册时间、投资金额列表导出至Excel表格中。"></a>将网站的全部会员（含管理员）的会员ID、用户名、推荐人用户名、姓名、手机号、证件号、会员类型、注册时间、投资金额列表导出至Excel表格中。</h2><p>使用网镜打开网站并登录，点击网站右上角<strong>管理区</strong>，然后点击<strong>会员管理</strong>，看到所有用户的相关信息的表格。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/12-1.png" alt=""><br>点击右上角绿色的拓展应用，选择自由固定，此时右上角的拓展栏中多出一只手的拓展应用。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/12-2.png" alt=""><br>点击批处理模式→提取CSV→一键检测表格，然后翻到表格下方，在翻页按钮处选择<code>设置为下一页</code>，等待提取出CSV文件即可。<br>接下来用EXCEL表将CSV导入：新建EXCEL→数据→从文本/CSV→选择文件→分隔符选逗号，导入。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/12-3.png" alt=""><br>导入之后把含有ID那一栏的数据筛选掉，只留下存有数据的栏。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/12-4.png" alt=""><br>此时导入Excel表格的任务就完成了。</p><h2 id="使用同一证件号注册会员账号数量最多的会员姓名，以及该会员的全部账号的投资总金额。"><a href="#使用同一证件号注册会员账号数量最多的会员姓名，以及该会员的全部账号的投资总金额。" class="headerlink" title="使用同一证件号注册会员账号数量最多的会员姓名，以及该会员的全部账号的投资总金额。"></a>使用同一证件号注册会员账号数量最多的会员姓名，以及该会员的全部账号的投资总金额。</h2><p>回到十二题提取出的表，选择插入→数据透视表，选择证件号一栏，在右边把表项拖入行和值。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/myblog/afspt/13.png" alt=""><br>把生成的数据排序一下，查到次数最多的证件号是：130133196512251495，此证件号对应姓名：焦程翀。之后筛选计算此人投资总金额：118750。</p><h2 id="按照推荐人关系，以会员admin为第1层计，会员lkj8在网站会员层级中位于第几层，其上级会员和下级会员各占据了多少层；以图形或其它直观的形式展示该会员的上下级组织层级结构。"><a href="#按照推荐人关系，以会员admin为第1层计，会员lkj8在网站会员层级中位于第几层，其上级会员和下级会员各占据了多少层；以图形或其它直观的形式展示该会员的上下级组织层级结构。" class="headerlink" title="按照推荐人关系，以会员admin为第1层计，会员lkj8在网站会员层级中位于第几层，其上级会员和下级会员各占据了多少层；以图形或其它直观的形式展示该会员的上下级组织层级结构。"></a>按照推荐人关系，以会员admin为第1层计，会员lkj8在网站会员层级中位于第几层，其上级会员和下级会员各占据了多少层；以图形或其它直观的形式展示该会员的上下级组织层级结构。</h2><h2 id="统计网站中下级会员账号数量大于30个且下级会员账号多于3层的会员账号数量，统计上述会员账号按照证件号去重后的数量。"><a href="#统计网站中下级会员账号数量大于30个且下级会员账号多于3层的会员账号数量，统计上述会员账号按照证件号去重后的数量。" class="headerlink" title="统计网站中下级会员账号数量大于30个且下级会员账号多于3层的会员账号数量，统计上述会员账号按照证件号去重后的数量。"></a>统计网站中下级会员账号数量大于30个且下级会员账号多于3层的会员账号数量，统计上述会员账号按照证件号去重后的数量。</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>书面作业PLUS（加密）</title>
      <link href="/posts/c923e17e/"/>
      <url>/posts/c923e17e/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="ＷＲＯＮＧ！！！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">秘钥</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4d868772451990a82776631701010db22af371e929a31341977b53e318ae084c"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 瞎捣鼓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+jsDelivr搭建教程</title>
      <link href="/posts/f4de59d4/"/>
      <url>/posts/f4de59d4/</url>
      
        <content type="html"><![CDATA[<h2 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h2><p>在GitHub新建仓库，仓库名随便写，尽量简短，然后复制SSH地址。<br><strong>这里我就默认你已经在GitHub添加SSH Key了哈~</strong></p><h2 id="选择本地路径"><a href="#选择本地路径" class="headerlink" title="选择本地路径"></a>选择本地路径</h2><p>首先找一个目录，右键→Git Bash Here，输入指令<code>git init &amp;&amp; git clone 你的SSH地址</code>，此时该目录下便生成了一个和你仓库同名的文件夹，里面有一个隐藏的.git文件夹，此.git文件夹无需多管。</p><h2 id="放入资源"><a href="#放入资源" class="headerlink" title="放入资源"></a>放入资源</h2><p>进入仓库同名文件夹，可以放入任何小于20M的资源：音乐、图片、视频等等。jsDelivr不支持大于20M的文件。</p><div class="note info flat"><p>放入资源，输入<code>git add . &amp;&amp; git commit -m '1' &amp;&amp; git push origin master</code>，此处的1（称之为标志）可以随便改，并且每次都可以输入一样的标志，它用来展示你加入这个文件是干什么的。</p></div><h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><p>现在就可以引用你的资源了：<br><a href="https://cdn.jsdelivr.net/gh/你的用户名@master/你的仓库名/文件路径">https://cdn.jsdelivr.net/gh/你的用户名@master/你的仓库名/文件路径</a><br>通过这个url访问到的就是CDN加速之后的了。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>如果实在懒得出奇，可以在文件夹中添加一个文件：<br>新建txt，里面输入<code>git add . &amp;&amp; git commit -m '1' &amp;&amp; git push origin master</code>，保存退出，然后把后缀名改成.sh，之后双击就可以自动上传啦~</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><ul><li>此文未涉及PicGo，原因很简单，无法对文件进行分类。</li><li>任何公开仓库中、任何分支、任何小于20M的文件都可用jsDelivr加速访问。<br>要善于利用<code>https://cdn.jsdelivr.net/gh/</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎捣鼓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学备战公安联考</title>
      <link href="/posts/8799a49e/"/>
      <url>/posts/8799a49e/</url>
      
        <content type="html"><![CDATA[<h1 id="各项占比"><a href="#各项占比" class="headerlink" title="各项占比"></a>各项占比</h1><p>行测40%、很容易拉分、花费大量时间学习：知觉速度与准确性、机考<br>申论30%、分数差距不大：三个小题一个大作文、150min<br>公安基础30%：</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 联考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客初期建立框架及自定义</title>
      <link href="/posts/44712f12/"/>
      <url>/posts/44712f12/</url>
      
        <content type="html"><![CDATA[<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><h2 id="配置教程"><a href="#配置教程" class="headerlink" title="配置教程"></a>配置教程</h2><p>主题为<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>。<br>butterfly主题的<a href="https://demo.jerryc.me">JC配置教程</a>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean(非必要)</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo s（本地部署）</span><br></pre></td></tr></tbody></table></figure><h1 id="模块详解"><a href="#模块详解" class="headerlink" title="模块详解"></a>模块详解</h1><h2 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h2><p>目前用的是valine系统。<br>基于LeanCloud支持，我用的是国际版，还算比较方便。<br>留言时不必注册登录账号，想说什么可以直接说。</p><h2 id="音乐电影"><a href="#音乐电影" class="headerlink" title="音乐电影"></a>音乐电影</h2><p>基于<a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a>和<a href="https://github.com/MoePlayer/hexo-tag-dplayer">hexo-tag-dplayer</a>。参考GitHub的md还是搞不懂具体的配置流程，所以暂且搁置下了额。</p><h2 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h2><p>原footer背景不舒服，改成了背景渐变式：以butterfly2.2.5为例，butterfly.yml的inject-head模块中引入<a href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/footer.min.css">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/footer.min.css</a></p><ul><li>此css来自于<a href="https://www.antmoe.com/">Dreamy.TZK——小康</a></li></ul><h2 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h2><p>在<a href="https://www.iconfont.cn/">iconfont</a>挑选图标，放到购物车，然后添加到自己的项目中（没有项目就新建一个，没有用户就注册一个），进入项目，点击Font class，按照提示点一下更新之后，复制css，前面加上<code>https:</code>，添加到如上footer同样位置的地方，之后就可以引用自己项目中的iconfont啦！</p><ul><li>方法：原fa fa-xxx改成iconfont icon-xxx</li></ul><div class="note info flat"><p>每次更新完项目库都要替换原来的css哦~如果嫌麻烦，可以一次性把所有感觉日后可能用到的图标都添加上。</p></div><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><div class="note info flat"><p>此篇文章仅针对butterfly主题所写，其他主题则仅供参考。</p></div><p><strong>废话不多说，直接上教程</strong>：</p><ol><li>从<a href="https://www.ziticangku.com/">字体仓库</a>找个好看的字体（或者你自己有字体文件）。</li><li>上<a href="https://www.fontke.com/tool/fontface/">转换网站</a>把你的字体文件转换成css。</li><li>把css引入博客，插到inject里面。</li><li>把butterfly配置文件里的font-family改成与css相对应的字体。</li></ol><h2 id="post页"><a href="#post页" class="headerlink" title="post页"></a>post页</h2><h3 id="文章头"><a href="#文章头" class="headerlink" title="文章头"></a>文章头</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">title:                     //标题</span><br><span class="line">cover:                     //封面</span><br><span class="line">description:               //简述</span><br><span class="line">tags:                      //标签</span><br><span class="line">tags:[1,2]                 //多个同级标签(无父子级标签)</span><br><span class="line">categories:                //分类</span><br><span class="line">categories:[1,2]           //多个同级分类</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 1</span><br><span class="line"><span class="bullet">-</span> 2                        //父子级分类(还可以往下加3、4、5······∞)</span><br><span class="line">top:                       //置顶(true/false)</span><br><span class="line">hidden:                    //隐藏(true/false)</span><br><span class="line">password:                  //密码(如果不设置，最后三项都不必填写)</span><br><span class="line">message:                   //密码输入框信息</span><br><span class="line">wrong<span class="emphasis">_pass_</span>message:        //密码错误弹窗信息</span><br></pre></td></tr></tbody></table></figure><h3 id="标签多样化"><a href="#标签多样化" class="headerlink" title="标签多样化"></a>标签多样化</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% note 标签背景 %} #标签背景:default、primary、success、info、warning、danger.</span><br><span class="line">要输入的文本.           #更改标签背景色，到butterfly.yml里面的note模块修改。</span><br><span class="line">{% endnote %}           </span><br></pre></td></tr></tbody></table></figure><div class="note default flat"><p>default</p></div><div class="note primary flat"><p>primary</p></div><div class="note success flat"><p>success</p></div><div class="note info flat"><p>info</p></div><div class="note warning flat"><p>warning</p></div><div class="note danger flat"><p>danger</p></div><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h4 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h4><ol><li>公共图床：imgchr，不注册就能上传图片，外链很方便，无水印，全球CDN。</li><li>私人图床：<a href="/posts/f4de59d4/" title="GitHub+jsDelivr">GitHub+jsDelivr</a></li></ol><h4 id="相对路径方法"><a href="#相对路径方法" class="headerlink" title="相对路径方法"></a>相对路径方法</h4><ul><li>plugin式</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 哈喽，沃德</span><br></pre></td></tr></tbody></table></figure><p>输入后，_posts 文件夹下面会出现 哈喽，沃德.md 和 哈喽，沃德 文件夹，把图片放到文件夹中，在 md 里面这样写：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% asset<span class="emphasis">_img 某图片.后缀名 图片展示的名字 %}</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Markdown式</li></ul><p>在主题source文件夹下新建photos文件夹专门用于放置文章图片，在md里面引用：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片名</span>](<span class="link">/photos/图片名.后缀名</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="右键新建Markdown"><a href="#右键新建Markdown" class="headerlink" title="右键新建Markdown"></a>右键新建Markdown</h1><p>以typora为例：<br>新建txt，输入以下代码，保存后关闭，后缀名改成reg，双击导入注册表。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\.md]</span><br><span class="line">@="Typora.exe"</span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line">"NullFile"=""</span><br><span class="line">[HKEY_CLASSES_ROOT\Typora.exe]</span><br><span class="line">@="Markdown"</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎捣鼓 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python程序可视化——GUI教程</title>
      <link href="/posts/15a1b8f6/"/>
      <url>/posts/15a1b8f6/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态信息</title>
      <link href="/posts/bfc833e9/"/>
      <url>/posts/bfc833e9/</url>
      
        <content type="html"><![CDATA[<h1 id="1XX：信息"><a href="#1XX：信息" class="headerlink" title="1XX：信息"></a>1XX：信息</h1><table><thead><tr><th align="center">消息</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">100 Continue</td><td align="center">服务器仅接收到部分请求，如果服务器没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td align="center">101 Switching Protocols</td><td align="center">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr><tr><td align="center">103 Checkpoint</td><td align="center">用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td></tr></tbody></table><h1 id="2XX：成功"><a href="#2XX：成功" class="headerlink" title="2XX：成功"></a>2XX：成功</h1><table><thead><tr><th align="center">消息</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">200 OK</td><td align="center">请求成功（这是对HTTP请求成功的标准应答。）</td></tr><tr><td align="center">201 Created</td><td align="center">请求被创建完成，同时新的资源被创建。</td></tr><tr><td align="center">202 Accepted</td><td align="center">供处理的请求已被接受，但是处理未完成。</td></tr><tr><td align="center">203 Non-Authoritative Information</td><td align="center">请求已经被成功处理，但是一些应答头可能不正确，因为使用的是其他文档的拷贝。</td></tr><tr><td align="center">204 No Content</td><td align="center">请求已经被成功处理，但是没有返回新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td align="center">205 Reset Content</td><td align="center">请求已经被成功处理，但是没有返回新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td align="center">206 Partial Content</td><td align="center">客户发送了一个带有Range头的GET请求，服务器完成了它。</td></tr></tbody></table><h1 id="3XX：重定向"><a href="#3XX：重定向" class="headerlink" title="3XX：重定向"></a>3XX：重定向</h1><table><thead><tr><th align="center">消息</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">300 Multiple Choices</td><td align="center">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td align="center">301 Moved Permanently</td><td align="center">所请求的页面已经转移至新的 URL 。</td></tr><tr><td align="center">302 Found</td><td align="center">所请求的页面已经临时转移至新的 URL 。</td></tr><tr><td align="center">303 See Other</td><td align="center">所请求的页面可在别的 URL 下被找到。</td></tr><tr><td align="center">304 Not Modified</td><td align="center">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td align="center">305 Use Proxy</td><td align="center">客户请求的文档应该通过Location头所指明的代理服务器提取。</td></tr><tr><td align="center">306 Switch Proxy</td><td align="center"><em>目前已不再使用，但是代码依然被保留。</em></td></tr><tr><td align="center">307 Temporary Redirect</td><td align="center">被请求的页面已经临时移至新的 URL 。</td></tr><tr><td align="center">308 Resume Incomplete</td><td align="center">用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td></tr></tbody></table><h1 id="4XX：客户端错误"><a href="#4XX：客户端错误" class="headerlink" title="4XX：客户端错误"></a>4XX：客户端错误</h1><table><thead><tr><th align="center">消息</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">400 Bad Request</td><td align="center">因为语法错误，服务器未能理解请求。</td></tr><tr><td align="center">401 Unauthorized</td><td align="center">合法请求，但对被请求页面的访问被禁止。因为被请求的页面需要身份验证，客户端没有提供或者身份验证失败。</td></tr><tr><td align="center">402 Payment Required</td><td align="center">* 此代码尚无法使用。*</td></tr><tr><td align="center">403 Forbidden</td><td align="center">合法请求，但对被请求页面的访问被禁止。</td></tr><tr><td align="center">404 Not Found</td><td align="center">服务器无法找到被请求的页面。</td></tr><tr><td align="center">405 Method Not Allowed</td><td align="center">请求中指定的方法不被允许。</td></tr><tr><td align="center">406 Not Acceptable</td><td align="center">服务器生成的响应无法被客户端所接受。</td></tr><tr><td align="center">407 Proxy Authentication Required</td><td align="center">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td align="center">408 Request Timeout</td><td align="center">请求超出了服务器的等待时间。</td></tr><tr><td align="center">409 Conflict</td><td align="center">由于冲突，请求无法被完成。</td></tr><tr><td align="center">410 Gone</td><td align="center">被请求的页面不可用。</td></tr><tr><td align="center">411 Length Required</td><td align="center">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td align="center">412 Precondition Failed</td><td align="center">请求中的前提条件被服务器评估为失败。</td></tr><tr><td align="center">413 Request Entity Too Large</td><td align="center">由于所请求的实体太大，服务器不会接受请求。</td></tr><tr><td align="center">414 Request-URI Too Long</td><td align="center">由于 URL 太长，服务器不会接受请求。当 POST 请求被转换为带有很长的查询信息的 GET 请求时，就会发生这种情况。</td></tr><tr><td align="center">415 Unsupported Media Type</td><td align="center">由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td align="center">416 Requested Range Not Satisfiable</td><td align="center">客户端请求部分文档，但是服务器不能提供被请求的部分。</td></tr><tr><td align="center">417 Expectation Failed</td><td align="center">服务器不能满足客户在请求中指定的请求头。</td></tr></tbody></table><h1 id="5XX：服务器错误"><a href="#5XX：服务器错误" class="headerlink" title="5XX：服务器错误"></a>5XX：服务器错误</h1><table><thead><tr><th align="center">信息</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">500 Internal Server Error</td><td align="center">请求未完成。服务器遇到不可预知的情况。</td></tr><tr><td align="center">501 Not Implemented</td><td align="center">请求未完成。服务器不支持所请求的功能，或者服务器无法完成请求。</td></tr><tr><td align="center">502 Bad Gateway</td><td align="center">请求未完成。服务器充当网关或者代理的角色时，从上游服务器收到一个无效的响应。</td></tr><tr><td align="center">503 Service Unavailable</td><td align="center">服务器当前不可用（过载或者宕机）。</td></tr><tr><td align="center">504 Gateway Timeout</td><td align="center">网关超时。服务器充当网关或者代理的角色时，未能从上游服务器收到一个及时的响应。</td></tr><tr><td align="center">505 HTTP Version Not Supported</td><td align="center">服务器不支持请求中指明的HTTP协议版本。</td></tr><tr><td align="center">511 Network Authentication Required</td><td align="center">用户需要提供身份验证来获取网络访问入口。</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API使用基础</title>
      <link href="/posts/971bf88/"/>
      <url>/posts/971bf88/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>曼彻斯特编码简述</title>
      <link href="/posts/69d6d78f/"/>
      <url>/posts/69d6d78f/</url>
      
        <content type="html"><![CDATA[<h1 id="曼彻斯特编码"><a href="#曼彻斯特编码" class="headerlink" title="曼彻斯特编码"></a>曼彻斯特编码</h1><p><strong>曼彻斯特编码（ManchesterEncoding），也叫做相位编码（PhaseEncode，简写PE），是一个同步时钟编码技术，被物理层使用来编码一个同步位流的时钟和数据。它在以太网媒介系统中的应用属于数据通信中的两种位同步方法里的自同步法（另一种是外同步法），即接收方利用包含有同步信号的特殊编码从信号自身提取同步信号来锁定自己的时钟脉冲频率，达到同步目的。</strong></p><p>在曼彻斯特编码中，每个码元均用两个不同相位的电平信号表示，也就是一个周期的方波；每一位的中间有一跳变，位中间的跳变既作时钟信号，又作数据信号.<br><strong>从高到低跳变表示<code>1</code>，从低到高跳变表示<code>0</code></strong>,如下图：</p><p><img src= "https://cdn.jsdelivr.net/gh/542929409/cdn@master/basic/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/blog/posts/manchester/1.png" alt="1"></p><p><img src= "https://cdn.jsdelivr.net/gh/542929409/cdn@master/basic/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/blog/posts/manchester/2.png" alt="2"></p><p>假设信号的上升沿表示“0”，下降沿表示“1”，同时假设数据的波特率为f,那么一个位的时长为1/f，那么位帧的中间时长为1/2f，我们用T来表示这个半个位帧的时长。</p><p>有了以上的假设条件，那么曼彻斯特的<strong>编码流程</strong>如下：</p><ol><li>首先I/O口输出高电平。</li><li>检查数据是否发送完成，如果是，跳到步骤7。</li><li>检查下一个数据位的值。</li><li>如果是“1”，调用发送1的函数ManchesterOne(T)。</li><li>如果是”0”，调用发送0的函数ManchesterZero(T)。</li><li>返回到步骤2。</li><li>I/O输出为高电平并返回。</li></ol><p><strong>ManchesterOne(T)的执行过程：</strong></p><ol><li>I/O输出低电平。</li><li>等待半位帧时间T。</li><li>I/O输出高电平。</li><li>等待半位帧时间T。</li><li>返回。</li></ol><p><strong>ManchesterZero(T)的执行过程：</strong></p><ol><li>I/O输出高电平。</li><li>等待半位帧时间T。</li><li>I/O输出低电平。</li><li>等待半位帧时间T。</li><li>返回。</li></ol><h1 id="差分曼彻斯特编码"><a href="#差分曼彻斯特编码" class="headerlink" title="差分曼彻斯特编码"></a>差分曼彻斯特编码</h1><p>差分曼彻斯特编码区别于标准曼彻斯特编码，在信号位开始时改变信号极性，表示<code>0</code>，在信号位开始时不改变信号极性，表示<code>1</code>，如下图：</p><p><img src= "https://cdn.jsdelivr.net/gh/542929409/cdn@master/basic/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/blog/posts/manchester/3.png" alt="3"></p><div class="note info flat"><p><strong>注意：</strong><br>如果在最初信号的时候，即第一个信号时：<br>如果中间位电平从低到高，则表示0；<br>如果中间位电平从高到低，则表示1；<br>后面的（从第二个开始）就看每个信号位开始时有没有跳变来决定。</p></div><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>最后比较一下两者：</p><p><img src= "https://cdn.jsdelivr.net/gh/542929409/cdn@master/basic/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/blog/posts/manchester/4.png" alt="4"></p><p>将数字数据编码为数字信号的三种基本编码方式 :</p><ol><li>非归零编码 ( NRZ )</li><li>曼彻斯特编码</li><li>差分曼彻斯特编码</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML从0到1（一）</title>
      <link href="/posts/54bb007b/"/>
      <url>/posts/54bb007b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>HTML菜鸟教程：<a href="https://www.runoob.com/html/html-tutorial.html">https://www.runoob.com/html/html-tutorial.html</a><br>CSS菜鸟教程：<a href="https://www.runoob.com/css/css-tutorial.html">https://www.runoob.com/css/css-tutorial.html</a><br>JS菜鸟教程：<a href="https://www.runoob.com/js/js-tutorial.html">https://www.runoob.com/js/js-tutorial.html</a><br>Bootstrap5官方英文教程：<a href="https://getbootstrap.com/docs/5.0/getting-started/introduction">https://getbootstrap.com/docs/5.0/getting-started/introduction</a><br>Bootstrap5中文镜像教程：<a href="https://v5.bootcss.com/docs/getting-started/introduction">https://v5.bootcss.com/docs/getting-started/introduction</a></p></blockquote><h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> 声明为HTML5文档</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> 根元素</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> 元数据</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span> 网页编码格式</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> 标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> 可见的页面内容</span><br><span class="line">xxx</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>head标签</strong>结束前可以插入CSS、JS及各种meta信息。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"xxx"</span>&gt;</span> css</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"xxx"</span> &gt;</span> js</span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"xxx"</span>&gt;</span> 网站icon</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"30"</span>&gt;</span> 每30秒刷新页面</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/542929409/cdn@master/basic/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/blog/posts/html/2.png" alt=""></p><h2 id="基础元素-标签"><a href="#基础元素-标签" class="headerlink" title="基础元素/标签"></a>基础元素/标签</h2><blockquote><p>菜鸟教程HTML标签参考手册：<a href="https://www.runoob.com/tags/html-reference.html">https://www.runoob.com/tags/html-reference.html</a></p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> 一级标题</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span> 段落</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"xxx"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 链接</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xxx"</span> <span class="attr">alt</span>=<span class="string">"xxx"</span> <span class="attr">width</span>=<span class="string">"xxx"</span> <span class="attr">height</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span> 图片(当图片无法加载，其内容替换为alt所描述的字段)</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> 换行</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span> 水平线</span><br><span class="line"><span class="comment">&lt;!-- xxx --&gt;</span> 注释</span><br></pre></td></tr></tbody></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p>菜鸟教程HTML标准属性参考手册：<a href="https://www.runoob.com/tags/ref-standardattributes.html">https://www.runoob.com/tags/ref-standardattributes.html</a></p></blockquote><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">class</td><td align="center">定义一个或多个类名</td></tr><tr><td align="center">id</td><td align="center">定义唯一ID</td></tr><tr><td align="center">style</td><td align="center">行内样式</td></tr><tr><td align="center">title</td><td align="center">额外信息</td></tr></tbody></table><h2 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>  加粗文本</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">em</span>&gt;</span> 斜体文本</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">sub</span>&gt;</span> 下标</span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> 上标</span><br></pre></td></tr></tbody></table></figure><p><b>xxx</b> <strong>xxx</strong>  加粗文本<br><i>xxx</i> <em>xxx</em> 斜体文本<br><sub>xxx</sub> 下标<br><sup>xxx</sup> 上标</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"xxx"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 在新标签页打开链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"mailto:xxx"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 电子邮件链接</span><br></pre></td></tr></tbody></table></figure><h2 id="Style样式"><a href="#Style样式" class="headerlink" title="Style样式"></a>Style样式</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">style="background-color:xxx;" 背景颜色</span><br><span class="line">style="font-family:xxx;" 字体</span><br><span class="line">style="text-align:center;" 居中对齐</span><br></pre></td></tr></tbody></table></figure><h2 id="图片样式"><a href="#图片样式" class="headerlink" title="图片样式"></a>图片样式</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">coords</span>=<span class="string">"x,y,r"</span> <span class="attr">href</span>=<span class="string">"xxx"</span>&gt;</span> 位于（x,y）半径为r的圆形图片 </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> 图片链接</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xxx"</span> <span class="attr">style</span>=<span class="string">"float:right"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span> 浮动在xxx右侧的图片</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地项目仓库与Git仓库🔗连接</title>
      <link href="/posts/ea6d2905/"/>
      <url>/posts/ea6d2905/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>第一种：新建本地空白项目仓库连接Git仓库<br>第二种：现有Git仓库对接本地项目仓库</p></div><p>初始化仓库：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></tbody></table></figure><h1 id="本地→Git"><a href="#本地→Git" class="headerlink" title="本地→Git"></a>本地→Git</h1><p>首先初始化本地项目仓库：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></tbody></table></figure><p>然后会在当前目录下生成隐藏的<code>.git</code>文件夹。</p><p>经过初始化后，现在你可以把项目放进这个项目仓库文件夹了，之后添加文件并提交：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'xxx'</span></span><br></pre></td></tr></tbody></table></figure><p>下一步将这个项目仓库和目标Git仓库连接并上传至Git仓库：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin xxxxx   <span class="comment">#xxxxx为你的目标Git仓库地址</span></span><br><span class="line">git push -u origin master </span><br></pre></td></tr></tbody></table></figure><p><code>-u</code>参数是将本地的master与GIt仓库的master分支进行绑定，之后若要上传，直接<code>git push</code>就好了；如果没有加<code>-u</code>参数，之后上传要输入<code>git push origin master</code>才能上传到master分支。</p><h1 id="Git→本地"><a href="#Git→本地" class="headerlink" title="Git→本地"></a>Git→本地</h1><p>本地无需初始化，直接<code>git clone xxxxx</code>即可（xxxxx为你目标Git仓库的地址，建议使用ssh地址，因为http地址保不准什么时候会突然抽风）。</p><p><code>git clone</code>之后会在当前目录生成一个与你目标Git仓库同名的文件夹，文件夹里面的内容就包括<code>.git隐藏文件夹</code>和<code>项目内容</code>，这个文件夹就是已经与Git仓库建立连接的本地项目仓库了。</p><p>随后若要增删项目文件并上传，按照上面步骤即可。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol><li><code>git remote -v</code>：查看本地仓库与Git仓库连接的情况。</li><li><code>git remote rm origin</code>：移除本地仓库与Git仓库的连接。</li><li>一个本地仓库可以和多个Git仓库连接，反之只能一对一。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF_Re_部分Writeup</title>
      <link href="/posts/aa6da281/"/>
      <url>/posts/aa6da281/</url>
      
        <content type="html"><![CDATA[<h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><h2 id="分析文件"><a href="#分析文件" class="headerlink" title="分析文件"></a>分析文件</h2><p>ida64打开文件，shift+F12查看字符串窗口，发现<strong>Input your flag、success、failed</strong>关键信息。查看相关部分伪代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  v3 = (<span class="keyword">char</span> *)<span class="number">256</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Input your flag:\n"</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_line(v6, <span class="number">256L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v6) != <span class="number">33</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">33</span>; ++i )</span><br><span class="line">    v6[i] ^= v6[i - <span class="number">1</span>];</span><br><span class="line">  v3 = global;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(v6, global, <span class="number">0x21</span>uLL) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Success"</span>, v3);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_12:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Failed"</span>, v3);</span><br><span class="line">  result = __stack_chk_guard;</span><br><span class="line">  <span class="keyword">if</span> ( __stack_chk_guard == v7 )</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></tbody></table></figure><h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><p>输入<code>v6</code>，如果字符串长度≠33，输出failed；如果=33，那么<code>v6</code>从第二位起，每一位都与前一位异或，异或的结果与global的值相等，输出success。<br>跟进global的值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__cstring:0000000100000F6E aFKWOXZUPFVMDGH db 'f',0Ah              ; DATA XREF: __data:_global↓o</span><br><span class="line">__cstring:0000000100000F6E                 db 'k',0Ch,'w&amp;O.@',11h,'x',0Dh,'Z;U',11h,'p',19h,'F',1Fh,'v"M#D',0Eh,'g'</span><br><span class="line">__cstring:0000000100000F6E                 db 6,'h',0Fh,'G2O',0</span><br></pre></td></tr></tbody></table></figure><h2 id="写脚本"><a href="#写脚本" class="headerlink" title="写脚本"></a>写脚本</h2><p>伪代码的意思就是：flag的长度是33位，每一位与前一位异或出的结果值是global。写脚本就是把这个过程逆过来。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">str1 = [<span class="string">'f'</span>,<span class="number">0x0a</span>,<span class="string">'k'</span>,<span class="number">0x0c</span>,<span class="string">'w'</span>,<span class="string">'&amp;'</span>,<span class="string">'O'</span>,<span class="string">'.'</span>,<span class="string">'@'</span>,<span class="number">0x11</span>,<span class="string">'x'</span>,<span class="number">0x0d</span>,<span class="string">'Z'</span>,<span class="string">';'</span>,<span class="string">'U'</span>,<span class="number">0x11</span>,<span class="string">'p'</span>,<span class="number">0x19</span>,<span class="string">'F'</span>,<span class="number">0x1f</span>,<span class="string">'v'</span>,<span class="string">'"'</span>,<span class="string">'M'</span>,<span class="string">'#'</span>,<span class="string">'D'</span>,<span class="number">0x0e</span>,<span class="string">'g'</span>,<span class="number">0x06</span>,<span class="string">'h'</span>,<span class="number">0x0f</span>,<span class="string">'G'</span>,<span class="string">'2'</span>,<span class="string">'O'</span>,<span class="number">0x00</span>]  <span class="comment">#原始数据</span></span><br><span class="line">str2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line"><span class="keyword">if</span> (isinstance(i,str)):   <span class="comment">#判断i是否为str类型</span></span><br><span class="line">str2.append(ord(i))   <span class="comment">#转换为ASCII数值</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">str2.append(int(i))  <span class="comment">#转换为整形</span></span><br><span class="line">print(str2)</span><br><span class="line">flag = <span class="string">'f'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(str2)):</span><br><span class="line">flag = flag+chr(str2[i]^str2[i<span class="number">-1</span>])  <span class="comment">#异或运算</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></tbody></table></figure><p>最后获取到flag：<code>flag{QianQiuWanDai_YiTongJiangHu}</code></p><h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h1><h2 id="分析文件-1"><a href="#分析文件-1" class="headerlink" title="分析文件"></a>分析文件</h2><p>ida32打开文件，查看字符串窗口，发现<code>wrong flag!</code>、<code>right flag!</code>，点进去查看伪代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i &gt;= <span class="number">0x64</span> )</span><br><span class="line">      j____report_rangecheckfailure();</span><br><span class="line">    Dest[i] = <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">  sub_41132F(<span class="string">"please enter the flag:"</span>);</span><br><span class="line">  sub_411375(<span class="string">"%20s"</span>, &amp;Str);</span><br><span class="line">  v0 = j_strlen(&amp;Str);</span><br><span class="line">  v1 = (<span class="keyword">const</span> <span class="keyword">char</span> *)sub_4110BE(&amp;Str, v0, &amp;v11);</span><br><span class="line">  <span class="built_in">strncpy</span>(Dest, v1, <span class="number">0x28</span>u);</span><br><span class="line">  v8 = j_strlen(Dest);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v8; ++j )</span><br><span class="line">    Dest[j] += j;</span><br><span class="line">  v2 = j_strlen(Dest);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Dest, Str2, v2) )</span><br><span class="line">    sub_41132F(<span class="string">"rigth flag!\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_41132F(<span class="string">"wrong flag!\n"</span>);</span><br><span class="line">  HIDWORD(v4) = v3;</span><br><span class="line">  LODWORD(v4) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分析代码-1"><a href="#分析代码-1" class="headerlink" title="分析代码"></a>分析代码</h2><p>第八行输入flag，并在第十行<code>sub_4110BE</code>函数对输入的flag进行处理。<br>点进去查看<code>sub_4110BE</code>函数：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// STE0_4</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// STE0_4</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// STE0_4</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E0h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v11; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">void</span> *Dst; <span class="comment">// [esp+F8h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> *v13; <span class="comment">// [esp+104h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !_4 || !_8 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v9 = _8 / <span class="number">3u</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)(_8 / <span class="number">3u</span>) % <span class="number">3</span> )</span><br><span class="line">    ++v9;</span><br><span class="line">  v10 = <span class="number">4</span> * v9;</span><br><span class="line">  *(_DWORD *)_C = v10;</span><br><span class="line">  Dst = <span class="built_in">malloc</span>(v10 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !Dst )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  j_memset(Dst, <span class="number">0</span>, v10 + <span class="number">1</span>);</span><br><span class="line">  v13 = (<span class="keyword">char</span> *)_4;</span><br><span class="line">  v11 = _8;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v11 &gt; <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    byte_41A144[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; v11 &gt;= <span class="number">1</span>; ++i )</span><br><span class="line">    {</span><br><span class="line">      byte_41A144[i] = *v13;</span><br><span class="line">      --v11;</span><br><span class="line">      ++v13;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( !i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( i )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        *((_BYTE *)Dst + v7) = aAbcdefghijklmn[(<span class="keyword">signed</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v4 = v7 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)Dst + v4++) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | <span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v4++) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        *((_BYTE *)Dst + v4) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v7 = v4 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        *((_BYTE *)Dst + v7) = aAbcdefghijklmn[(<span class="keyword">signed</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v5 = v7 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)Dst + v5++) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | <span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v5++) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | <span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v7 = v5 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        *((_BYTE *)Dst + v7) = aAbcdefghijklmn[(<span class="keyword">signed</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v6 = v7 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)Dst + v6++) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | <span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v6++) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | <span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>)];</span><br><span class="line">        *((_BYTE *)Dst + v6) = aAbcdefghijklmn[byte_41A144[<span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">        v7 = v6 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  *((_BYTE *)Dst + v7) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> Dst;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>又复杂又头疼还完全看不懂的加密······不过反复出现的<code>aAbcdefghijklmn</code>有必要去看一下，发现是<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</code>。<br>可以看出是base64加密。</p><p>看完<code>sub_4110BE</code>函数，返回伪代码继续往下看（此时v1=base64加密后的flag），第十一行的<code>strncpy</code>函数，把v1的值赋给Dest，后面的<code>0x28u</code>的意思是把v1字符串的前<code>0x28</code>位无符号数(16进制)赋给Dest。</p><p>第十三、十四行的for循环，就是把Dest的每一位加上其对应的数字，然后与str2比较，相等就是right flag。</p><h2 id="写脚本-1"><a href="#写脚本-1" class="headerlink" title="写脚本"></a>写脚本</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">str2 = <span class="string">'e3nifIH9b_C@n@dH'</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):   <span class="comment">#获取str2字符串的长度</span></span><br><span class="line">    x = chr(ord(str2[i]) - i)  <span class="comment">#转化成ASCII码对应的数字，然后减去相应位数的数字，再转成字符</span></span><br><span class="line">    flag = flag + x</span><br><span class="line">print(flag)  <span class="comment">#先print一次看看是什么样的</span></span><br><span class="line">flag = base64.b64decode(flag)  <span class="comment">#base64解密</span></span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>最后跑出结果：<code>{i_l0ve_you}</code></p><h1 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h1><p>打开exe，是一个需要输入1234进行上下左右操作的小东西。<br><img src= "https://cdn.jsdelivr.net/gh/542929409/cdn@master/basic/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/542929409/cdn@master/blog/posts/buure/3.png" alt="不一样的flag"></p><h2 id="分析文件-2"><a href="#分析文件-2" class="headerlink" title="分析文件"></a>分析文件</h2><p>ida32打开文件，查看main函数伪代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+17h] [ebp-35h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+30h] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+34h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+38h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+3Ch] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+40h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  qmemcpy(&amp;v3, _data_start__, <span class="number">0x19</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you can choose one action to execute"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1 up"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"2 down"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"3 left"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"4 right\n:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v6);</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">2</span> )</span><br><span class="line">    {</span><br><span class="line">      ++v4;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v6 &gt; <span class="number">2</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v6 == <span class="number">3</span> )</span><br><span class="line">      {</span><br><span class="line">        --v5;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( v6 != <span class="number">4</span> )</span><br><span class="line">LABEL_13:</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        ++v5;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      --v4;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;v4 + i) &lt; <span class="number">0</span> || *(&amp;v4 + i) &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)&amp;v8 + <span class="number">5</span> * v4 + v5 - <span class="number">41</span>) == `<span class="number">1</span>` )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)&amp;v8 + <span class="number">5</span> * v4 + v5 - <span class="number">41</span>) == `#` )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"\nok, the order you enter is the flag!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分析代码-2"><a href="#分析代码-2" class="headerlink" title="分析代码"></a>分析代码</h2><p>第12行的qmemcpy实则是memcpy()函数，其作用是内存拷贝，后面是把<code>_data_start__</code>的数据赋给v3，进行程序的初始化。<br>查看<code>_data_start__</code>的值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.data:00402000 __data_start__  db '*11110100001010000101111#',0</span><br></pre></td></tr></tbody></table></figure><p>15-20行就是程序的操作界面，输入v6的值开始跑程序。</p><p>从47行开始的一个循环和两个条件语句来看，这是一个迷宫题，结合<code>_data_start__</code>的值，要从*跑到#，并且中途不能碰到1。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>结合<code>_data_start__</code>的值，可以形成一个5×5的迷宫：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*1111</span><br><span class="line">01000</span><br><span class="line">01010</span><br><span class="line">00010</span><br><span class="line">1111#</span><br></pre></td></tr></tbody></table></figure><p>按照1234上下左右的步骤，最后得出<code>flag{222441144222}</code></p><h1 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h1><h2 id="分析文件-3"><a href="#分析文件-3" class="headerlink" title="分析文件"></a>分析文件</h2><p>ida64打开，查看字符串窗口，发现：<code>Please input your flag</code>、<code>Congratulation</code>，查看相关部分伪代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">Decry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+Fh] [rbp-51h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_QWORD *)src = 'SLCDN';</span><br><span class="line">  v7 = <span class="number">0L</span>L;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = 'wodah';</span><br><span class="line">  v10 = <span class="number">0L</span>L;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  text = join(key3, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v9);</span><br><span class="line">  <span class="built_in">strcpy</span>(key, key1);</span><br><span class="line">  <span class="built_in">strcat</span>(key, src);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  getchar();</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(key);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( key[v3 % v5] &gt; <span class="number">64</span> &amp;&amp; key[v3 % v5] &lt;= <span class="number">90</span> )</span><br><span class="line">      key[i] = key[v3 % v5] + <span class="number">32</span>;</span><br><span class="line">    ++v3;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please input your flag:"</span>, src);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    v1 = getchar();</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">32</span> )</span><br><span class="line">    {</span><br><span class="line">      ++v2;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v1 &lt;= <span class="number">96</span> || v1 &gt; <span class="number">122</span> )</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( v1 &gt; <span class="number">64</span> &amp;&amp; v1 &lt;= <span class="number">90</span> )</span><br><span class="line">          str2[v2] = (v1 - <span class="number">39</span> - key[v3++ % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        str2[v2] = (v1 - <span class="number">39</span> - key[v3++ % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( !(v3 % v5) )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">      ++v2;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(text, str2) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Congratulation!\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try again!\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v12;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分析代码-3"><a href="#分析代码-3" class="headerlink" title="分析代码"></a>分析代码</h2><p>第23行引入一个自定义的join函数，点进去查看一下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">join</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, <span class="keyword">const</span> <span class="keyword">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(a2);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(v2 + v3 + <span class="number">1</span>);     <span class="comment">//给dest分配一个存储空间</span></span><br><span class="line">  <span class="keyword">if</span> ( !dest )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, a1);     <span class="comment">//把a1的值赋给dest</span></span><br><span class="line">  <span class="built_in">strcat</span>(dest, a2);     <span class="comment">//把a2拼接到a1后面</span></span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过strcpy、strcat函数，可以知道join函数的功能就是拼接字符串。</p><p><strong>回到最初的伪代码段：</strong><br>此时第23行的text=killshadow(v9处为小端序存储，从右向左看)。</p><p>继续往下走，第24行赋值，25行连接。完事后key=ADSFKNDCLS</p><p>第29行获取key的长度。</p><p>第30~35行的循环，实际功能是把<code>key</code>的大写字母转换成小写。（参考ASCII码表，A=65，a=97，Z=90，z=122）</p><p>第37~60行的循环，就是把<code>key</code>进行<strong>str2[v2] = (v1 - 39 - key[v3++ % v5] + 97) % 26 + 97</strong>运算，看似是套了判断语句，其实条件是否成立，执行的命令都是一样的，相当于判断了个寂寞。</p><h2 id="写脚本-2"><a href="#写脚本-2" class="headerlink" title="写脚本"></a>写脚本</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'killshadow'</span></span><br><span class="line">key = <span class="string">'adsfkndcls'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">        tmp=chr(ord(text[i]) - <span class="number">97</span> + <span class="number">26</span>*j - <span class="number">97</span> + ord(key [v3%<span class="number">10</span>]) + <span class="number">39</span>)</span><br><span class="line">        <span class="keyword">if</span> ord(tmp)&gt;<span class="number">64</span> <span class="keyword">and</span> ord(tmp) &lt;<span class="number">91</span>:</span><br><span class="line">            flag+=tmp</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    v3+=<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></tbody></table></figure><p>flag：flag{KLDQCUDFZO}</p><h1 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h1><h2 id="分析代码-4"><a href="#分析代码-4" class="headerlink" title="分析代码"></a>分析代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"Please input the flag ："</span>);</span><br><span class="line">    String str = s.next();</span><br><span class="line">    System.out.println(<span class="string">"Your input is ："</span>);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="keyword">char</span>[] stringArr = str.toCharArray();</span><br><span class="line">    Encrypt(stringArr);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Encrypt</span><span class="params">(<span class="keyword">char</span>[] arr)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    ArrayList&lt;Integer&gt; Resultlist = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">int</span> result = arr[i] + <span class="string">'@'</span> ^ <span class="number">0x20</span>;</span><br><span class="line">      Resultlist.add(Integer.valueOf(result));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span>[] KEY = { <span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span> };</span><br><span class="line">    ArrayList&lt;Integer&gt; KEYList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; KEY.length; j++) {</span><br><span class="line">      KEYList.add(Integer.valueOf(KEY[j]));</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"Result:"</span>);</span><br><span class="line">    <span class="keyword">if</span> (Resultlist.equals(KEYList)) {</span><br><span class="line">      System.out.println(<span class="string">"Congratulations！"</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      System.err.println(<span class="string">"Error！"</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从第21行的循环开始是重点：23行进行的是<code>arr数组</code>加上@的ASCII码值，再与0x20进行异或运算得到key。</p><h2 id="写脚本-3"><a href="#写脚本-3" class="headerlink" title="写脚本"></a>写脚本</h2><p>按照逆过程，key到flag就应该先与0x20异或，然后再减去@的ASCII码值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(str)):</span><br><span class="line">flag += chr(str[i] - ord(<span class="string">'@'</span>) ^ <span class="number">0x20</span>)  </span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></tbody></table></figure><p>得到flag：flag{This_is_the_flag_!}</p><h1 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h1><h2 id="分析文件-4"><a href="#分析文件-4" class="headerlink" title="分析文件"></a>分析文件</h2><p>首先还是按照自己的思路，先查看一下字符串窗口，发现有<code>U g3t 1T!</code>，差不多就是<code>you get it</code>的变形。下面就点进去看看相关部分的伪代码。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">BOOL __userpurge DialogFunc@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;edi&gt;, <span class="keyword">int</span> a2@&lt;esi&gt;, HWND hDlg, UINT a4, WPARAM a5, LPARAM a6)</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v6; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v7; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+4h] [ebp-20030h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+8h] [ebp-2002Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [esp+Ch] [ebp-20028h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [esp+10h] [ebp-20024h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+14h] [ebp-20020h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+18h] [ebp-2001Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+1Ch] [ebp-20018h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [esp+20h] [ebp-20014h]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [esp+24h] [ebp-20010h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+28h] [ebp-2000Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [esp+2Ch] [ebp-20008h]</span></span><br><span class="line">  CHAR String; <span class="comment">// [esp+30h] [ebp-20004h]</span></span><br><span class="line">  <span class="keyword">char</span> v21; <span class="comment">// [esp+31h] [ebp-20003h]</span></span><br><span class="line">  <span class="keyword">char</span> v22; <span class="comment">// [esp+32h] [ebp-20002h]</span></span><br><span class="line">  <span class="keyword">char</span> v23; <span class="comment">// [esp+33h] [ebp-20001h]</span></span><br><span class="line">  <span class="keyword">char</span> v24; <span class="comment">// [esp+34h] [ebp-20000h]</span></span><br><span class="line">  <span class="keyword">char</span> v25; <span class="comment">// [esp+10030h] [ebp-10004h]</span></span><br><span class="line">  <span class="keyword">char</span> v26; <span class="comment">// [esp+10031h] [ebp-10003h]</span></span><br><span class="line">  <span class="keyword">char</span> v27; <span class="comment">// [esp+10032h] [ebp-10002h]</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// [esp+20028h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v29; <span class="comment">// [esp+2002Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  __alloca_probe();</span><br><span class="line">  <span class="keyword">if</span> ( a4 == <span class="number">272</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  v29 = a2;</span><br><span class="line">  v28 = a1;</span><br><span class="line">  <span class="keyword">if</span> ( a4 != <span class="number">273</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a5 == <span class="number">1001</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">memset</span>(&amp;String, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">    GetDlgItemTextA(hDlg, <span class="number">1000</span>, &amp;String, <span class="number">0xFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;String) == <span class="number">8</span> )</span><br><span class="line">    {</span><br><span class="line">      v9 = <span class="number">90</span>;</span><br><span class="line">      v10 = <span class="number">74</span>;</span><br><span class="line">      v11 = <span class="number">83</span>;</span><br><span class="line">      v12 = <span class="number">69</span>;</span><br><span class="line">      v13 = <span class="number">67</span>;</span><br><span class="line">      v14 = <span class="number">97</span>;</span><br><span class="line">      v15 = <span class="number">78</span>;</span><br><span class="line">      v16 = <span class="number">72</span>;</span><br><span class="line">      v17 = <span class="number">51</span>;</span><br><span class="line">      v18 = <span class="number">110</span>;</span><br><span class="line">      v19 = <span class="number">103</span>;</span><br><span class="line">      sub_4010F0(&amp;v9, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="built_in">memset</span>(&amp;v25, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v6 = sub_401000((<span class="keyword">int</span>)&amp;v25, <span class="built_in">strlen</span>(&amp;v25));</span><br><span class="line">      <span class="built_in">memset</span>(&amp;v25, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v26 = v23;</span><br><span class="line">      v25 = v22;</span><br><span class="line">      v27 = v24;</span><br><span class="line">      v7 = sub_401000((<span class="keyword">int</span>)&amp;v25, <span class="built_in">strlen</span>(&amp;v25));</span><br><span class="line">      <span class="keyword">if</span> ( String == v9 + <span class="number">34</span></span><br><span class="line">        &amp;&amp; v21 == v13</span><br><span class="line">        &amp;&amp; <span class="number">4</span> * v22 - <span class="number">141</span> == <span class="number">3</span> * v11</span><br><span class="line">        &amp;&amp; v23 / <span class="number">4</span> == <span class="number">2</span> * (v16 / <span class="number">9</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v6, <span class="string">"ak1w"</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v7, <span class="string">"V1Ax"</span>) )</span><br><span class="line">      {</span><br><span class="line">        MessageBoxA(hDlg, <span class="string">"U g3t 1T!"</span>, <span class="string">"@_@"</span>, <span class="number">0</span>);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a5 != <span class="number">1</span> &amp;&amp; (_WORD)a5 != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  EndDialog(hDlg, (<span class="keyword">unsigned</span> __int16)a5);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分析代码-5"><a href="#分析代码-5" class="headerlink" title="分析代码"></a>分析代码</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> Writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Word电子稿冒充书面作业</title>
      <link href="/posts/c923e17e/"/>
      <url>/posts/c923e17e/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="ＷＲＯＮＧ！！！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">秘钥</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4d868772451990a82776631701010db22af371e929a31341977b53e318ae084c"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 瞎捣鼓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+jsDelivr搭建教程</title>
      <link href="/posts/f4de59d4/"/>
      <url>/posts/f4de59d4/</url>
      
        <content type="html"><![CDATA[<h2 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h2><p>在GitHub新建仓库，仓库名随便写，尽量简短，然后复制SSH地址。<br><strong>这里我就默认你已经在GitHub添加SSH Key了哈~</strong></p><h2 id="选择本地路径"><a href="#选择本地路径" class="headerlink" title="选择本地路径"></a>选择本地路径</h2><p>首先找一个目录，右键→Git Bash Here，输入指令<code>git init &amp;&amp; git clone 你的SSH地址</code>，此时该目录下便生成了一个和你仓库同名的文件夹，里面有一个隐藏的.git文件夹，此.git文件夹无需多管。</p><h2 id="放入资源"><a href="#放入资源" class="headerlink" title="放入资源"></a>放入资源</h2><p>进入仓库同名文件夹，可以放入任何小于20M的资源：音乐、图片、视频等等。jsDelivr不支持大于20M的文件。</p><div class="note info flat"><p>放入资源，输入<code>git add . &amp;&amp; git commit -m '1' &amp;&amp; git push origin master</code>，此处的1（称之为标志）可以随便改，并且每次都可以输入一样的标志，它用来展示你加入这个文件是干什么的。</p></div><h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><p>现在就可以引用你的资源了：<br><a href="https://cdn.jsdelivr.net/gh/你的用户名@master/你的仓库名/文件路径">https://cdn.jsdelivr.net/gh/你的用户名@master/你的仓库名/文件路径</a><br>通过这个url访问到的就是CDN加速之后的了。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>如果实在懒得出奇，可以在文件夹中添加一个文件：<br>新建txt，里面输入<code>git add . &amp;&amp; git commit -m '1' &amp;&amp; git push origin master</code>，保存退出，然后把后缀名改成.sh，之后双击就可以自动上传啦~</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><ul><li>此文未涉及PicGo，原因很简单，无法对文件进行分类。</li><li>任何公开仓库中、任何分支、任何小于20M的文件都可用jsDelivr加速访问。<br>要善于利用<code>https://cdn.jsdelivr.net/gh/</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎捣鼓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客初期建立框架及自定义</title>
      <link href="/posts/44712f12/"/>
      <url>/posts/44712f12/</url>
      
        <content type="html"><![CDATA[<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><h2 id="配置教程"><a href="#配置教程" class="headerlink" title="配置教程"></a>配置教程</h2><p>主题为<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>。<br>butterfly主题的<a href="https://demo.jerryc.me">JC配置教程</a>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean(非必要)</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo s（本地部署）</span><br></pre></td></tr></tbody></table></figure><h1 id="基础模块"><a href="#基础模块" class="headerlink" title="基础模块"></a>基础模块</h1><h2 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h2><p>目前用的是valine系统。<br>基于LeanCloud支持，比较方便。<br>留言无需注册登录账号。</p><h2 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h2><p>在<a href="https://www.iconfont.cn/">iconfont</a>挑选图标，放到购物车，然后添加到自己的项目中（没有项目就新建一个，没有用户就注册一个），进入项目，点击Font class，按照提示点一下更新之后，复制css，前面加上<code>https:</code>，添加到如上footer同样位置的地方，之后就可以引用自己项目中的iconfont啦！</p><ul><li>方法：原fa fa-xxx改成iconfont icon-xxx</li></ul><div class="note info flat"><p>每次更新完项目库都需要替换原来的css，如果嫌麻烦，可以一次性把所有感觉日后可能用到的图标都添加上。</p></div><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><div class="note info flat"><p>此篇文章仅针对butterfly主题所写，其他主题则仅供参考。</p></div><p><strong>废话不多说，直接上教程</strong>：</p><ol><li>从<a href="https://www.ziticangku.com/">字体仓库</a>找个好看的字体（或者你自己有字体文件）。但是注意一定不要侵权，指不定以后出了什么问题就解释不清了。</li><li>上<a href="https://www.fontke.com/tool/fontface/">转换网站</a>把你的字体文件转换成css。</li><li>把css引入博客，插到inject里面。</li><li>把butterfly配置文件里的font-family改成与css相对应的字体。</li></ol><h2 id="post页"><a href="#post页" class="headerlink" title="post页"></a>post页</h2><h3 id="文章头"><a href="#文章头" class="headerlink" title="文章头"></a>文章头</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">title:                     //标题</span><br><span class="line">cover:                     //封面</span><br><span class="line">description:               //简述</span><br><span class="line">tags:                      //标签</span><br><span class="line">tags:[1,2]                 //多个同级标签(无父子级标签)</span><br><span class="line">categories:                //分类</span><br><span class="line">categories:[1,2]           //多个同级分类</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 1</span><br><span class="line"><span class="bullet">-</span> 2                        //父子级分类(还可以往下加3、4、5······∞)</span><br><span class="line">top:                       //置顶(true/false)</span><br><span class="line">hidden:                    //隐藏(true/false)</span><br><span class="line">password:                  //密码(如果不设置，最后三项都不必填写)</span><br><span class="line">message:                   //密码输入框信息</span><br><span class="line">wrong<span class="emphasis">_pass_</span>message:        //密码错误弹窗信息</span><br></pre></td></tr></tbody></table></figure><h3 id="标签多样化"><a href="#标签多样化" class="headerlink" title="标签多样化"></a>标签多样化</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% note 标签背景 %} #标签背景:default、primary、success、info、warning、danger.</span><br><span class="line">要输入的文本.           #更改标签背景色，到butterfly.yml里面的note模块修改。</span><br><span class="line">{% endnote %}           </span><br></pre></td></tr></tbody></table></figure><div class="note default flat"><p>default</p></div><div class="note primary flat"><p>primary</p></div><div class="note success flat"><p>success</p></div><div class="note info flat"><p>info</p></div><div class="note warning flat"><p>warning</p></div><div class="note danger flat"><p>danger</p></div><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h4 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h4><ol><li>公共图床：imgchr，不注册就能上传图片，外链很方便，无水印，全球CDN。</li><li>私人图床：<a href="/posts/f4de59d4/" title="GitHub+jsDelivr">GitHub+jsDelivr</a></li></ol><h4 id="相对路径方法"><a href="#相对路径方法" class="headerlink" title="相对路径方法"></a>相对路径方法</h4><ul><li>plugin式</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 哈喽，沃德</span><br></pre></td></tr></tbody></table></figure><p>输入后，_posts 文件夹下面会出现 哈喽，沃德.md 和 哈喽，沃德 文件夹，把图片放到文件夹中，在 md 里面这样写：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% asset<span class="emphasis">_img 某图片.后缀名 图片展示的名字 %}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>aplayer播放器——单曲</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% aplayer 歌名 作者 歌url [图url, narrow, autoplay, width:, lrc:] %}</span><br></pre></td></tr></tbody></table></figure><p>aplayer播放器——单模块歌单列表</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">        {</span><br><span class="line">            "title": "",</span><br><span class="line">            "author": "",</span><br><span class="line">            "url": "",</span><br><span class="line">            "pic": ""，</span><br><span class="line">            "lrc": ""</span><br><span class="line">        }</span><br><span class="line">aplayer播放器——完整歌单列表</span><br><span class="line">{% aplayerlist %}</span><br><span class="line">{</span><br><span class="line">    "narrow": ,</span><br><span class="line">    "autoplay": ,</span><br><span class="line">    "mode": "",' </span><br><span class="line">    "showlrc": , </span><br><span class="line">    "preload": "",</span><br><span class="line">    "music": [</span><br><span class="line">        {</span><br><span class="line">            "title": "",</span><br><span class="line">            "author": "",</span><br><span class="line">            "url": "",</span><br><span class="line">            "pic": "",</span><br><span class="line">            "lrc": ""</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            "title": "",</span><br><span class="line">            "author": "",</span><br><span class="line">            "url": "",</span><br><span class="line">            "pic": ""，</span><br><span class="line">            "lrc": ""</span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br><span class="line">{% endaplayerlist %}</span><br></pre></td></tr></tbody></table></figure><h1 id="右键新建Markdown"><a href="#右键新建Markdown" class="headerlink" title="右键新建Markdown"></a>右键新建Markdown</h1><p>以typora为例：<br>新建txt，输入以下代码，保存后关闭，后缀名改成reg，双击导入注册表。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\.md]</span><br><span class="line">@="Typora.exe"</span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line">"NullFile"=""</span><br><span class="line">[HKEY_CLASSES_ROOT\Typora.exe]</span><br><span class="line">@="Markdown"</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎捣鼓 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
